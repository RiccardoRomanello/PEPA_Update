package uk.ac.ed.inf.pepa.parsing.internal;

import java_cup.runtime.*;
import uk.ac.ed.inf.pepa.parsing.*;
import org.apache.log4j.Logger;

action code {:
	
	/* The top-level AST node for the parsed file */
	public ModelNode model = ASTFactory.createModel();
	
	/* Utility field for collecting temporary action sets */
	final ActionManager actionManager = new ActionManager();
	
	class ActionManager {
		
		private final Actions actions = new Actions();
		
		public ActionManager() {
			resetActions();
		}
		
		public void resetActions() {
			actions.clear();
		} 
		
		public void add(ActionTypeNode action) {
			actions.add(action);
		}
		
		public Actions get() {
			Actions copy = new Actions();
			copy.addAll(actions);
			resetActions();
			return copy;
		}
	}
:}
parser code {:
        
    static final Logger logger = Logger.getLogger("uk.ac.ed.inf.pepa.parsing.parser");
    
    private String m_sExpected = ""; 
        
    public ModelNode getTemp() {
    	return action_obj.model;
    }    
    
    /* Return terminal symbols by sym. */	
	public String gettokenstr( int sym )
	{
	    String str;
	    switch( sym )
	    {	
	    	 case PepaToken.PASSIVE_MULTIPLIER: { str = " natural "; break; } 
	         case PepaToken.PROCESS_STRN:   { str=" identifier "; break; }
                 case PepaToken.ACTIVITY_STRN:  { str=" identifier "; break; }
                 case PepaToken.RPAREN:         { str=" ) "; break; }
             case PepaToken.TAU:				{ str=" TAU "; break; }
	         case PepaToken.SEMI:           { str=" ; "; break; }
	         case PepaToken.SUM:            { str=" + "; break; }
	         case PepaToken.LPAREN:         { str=" ( "; break; }
	         case PepaToken.HASH:           { str=" # "; break; }
	         case PepaToken.DOUBLE_NUMBER:  { str=" double "; break; }
	         case PepaToken.RCOOP:          { str=" > "; break; }
	         case PepaToken.EQUALS:         { str=" = "; break; }
	         case PepaToken.COMMA:  { str=" , "; break; }
	         case PepaToken.PERC:   { str=" % "; break; }
	         case PepaToken.EOF:    { str=" EOF "; break; }
	         case PepaToken.MULT:   { str=" * "; break; }
	         case PepaToken.DIVIDE: { str=" / "; break; }
	         case PepaToken.PAR:    { str=" || "; break; }
	         case PepaToken.TOP:    { str=" T or infty "; break; }
	         case PepaToken.MINUS:  { str=" - "; break; }
	         case PepaToken.DOT:    { str=" . "; break; }
	         case PepaToken.LCOOP:  { str=" < "; break; }
	         case PepaToken.RSET:   { str=" } "; break; }
	         case PepaToken.COOP:   { str=" <> "; break;}
	         case PepaToken.LSET:   { str=" { "; break; }	
	         case PepaToken.LSQUARE:{ str=" [ "; break; }
	         case PepaToken.RSQUARE:{ str=" ] "; break; }
             case PepaToken.RATE_EQUALS: 
                                    { str=" := "; break; }
             default: str="";
	   }
	   return str;      
	}
	
    /*
     * Prepares the list of expected input tokens.
     * It doesn't try any recover action.
     * Hence, unrecovered_syntax_error is likely to be thrown 
     */    
	public void syntax_error(java_cup.runtime.Symbol current) {
		//unrecovered_syntax_error(current);
		
		int state = ((Symbol)stack.peek()).parse_state;
		short[] row = action_tab[state];
		
		for( int i = 0; i<row.length; i++)
		{
		   if( row[i]>0)
		   {
                      m_sExpected += gettokenstr( row[i] ); i++;
		   }
		}
		logger.debug("syntax_error called");
	}
        /** Simply calls <code>report_fatal_error()</code>.
         */
	public void report_error(String message, java_cup.runtime.Symbol info){
		//report_fatal_error(message, info);
		logger.debug("report_error called");
	}

        /** Fetches column and line number from the lexer, and then throws 
         *  an excpetion containing the error message to signal
         *  that parsing has been unsuccesful. If the symbol
         *  contains a value, this is also reported.
         */
	public void unrecovered_syntax_error(java_cup.runtime.Symbol Current) throws ParserException{
		logger.debug("unrecovered_syntax_error called");
		done_parsing();
		PepaLexer pl = (PepaLexer)this.getScanner();
		throw new ParserException( 
			pl.getCurrentChar(),
		    (pl.getCurrentLineNumber()+1),
		     pl.getCurrentColumn(), 
                     pl.yylength(),
		    "Syntax Error. Current symbol: '"+(Current.value==null? gettokenstr(Current.sym) : Current.value)+
		    "'. Expected : '" + m_sExpected.toString() + "'");
	}

        /**Fetches column and line number from the lexer, and then throws and
         * Exception with the appropriate error message, to signal a failed parse.
         *
         */
	public void report_fatal_error(String message, Object info) throws ParserException{
		
		logger.debug("report_fatal_error called");
		done_parsing();
		PepaLexer pl = (PepaLexer)this.getScanner();
		throw new ParserException(
		pl.getCurrentChar(),
		    (pl.getCurrentLineNumber()+1),
		    pl.getCurrentColumn(),
                    pl.yylength(),
                    message);
        }

:}

terminal            COMMA, DOT, TOP, LPAREN, RPAREN, SEMI, EQUALS, PAR, RATE_EQUALS;
terminal            COOP, LCOOP, RCOOP, MINUS, MULT, SUM, DIVIDE, HASH, PERC;
terminal            LSET, RSET, LSQUARE, RSQUARE, TAU;
terminal 	Integer	PASSIVE_MULTIPLIER;
terminal    String  ACTIVITY_STRN, PROCESS_STRN;
terminal    Double  DOUBLE_NUMBER;

/* Non terminals */

non terminal ModelNode				model;
non terminal ProcessNode     		process;
non terminal ConstantProcessNode	constant;
non terminal CooperationNode		cooperation;
non terminal AggregationNode		aggregation;
non terminal VariableRateNode		variable_rate;
non terminal RateNode        		rate;
non terminal PassiveRateNode 		passive_rate;
non terminal FiniteRateNode			finite_rate;
non terminal ActionSuperNode      	activity_action_type;
non terminal ActionTypeNode      	action_type;
non terminal ActivityNode			activity;
non terminal Actions				action_set;
non terminal             			rate_assignment_token;
non terminal RateDefinitionNode		basic_rate_definition, rate_definition, rate_definition_list, action_list;
non terminal ProcessDefinitionNode	basic_process_definition, process_definition, process_definition_list;




/* The standard PEPA precedence for combinators as explained in Jane's Thesis:
 *
 * highest	HIDE
 *			PREFIX
 *		    COOPERATION
 * lowest	CHOICE
 *
 */

precedence left	    SUM,  MINUS;			// precedence of CHOICE
precedence left     LCOOP, PAR;		// precedence of the operators for COOPERATION
precedence nonassoc DOT;					// precedence of PREFIX
precedence left     MULT, DIVIDE;			// precedence of HIDE 

start with model;

model	 				::= rate_definition_list process_definition_list process:equation

	                       {: 	model.setSystemEquation(equation);
	                       		RESULT = model;
	                        :}
	     
	                    ;                  

rate_definition_list 	::= rate_definition_list rate_definition | ;
       
process_definition_list::= process_definition_list process_definition | ;			
						 
rate_assignment_token 	::= RATE_EQUALS | EQUALS ;

rate_definition       	::=  PERC basic_rate_definition:rate {: RESULT = rate; :} 
						  |  basic_rate_definition:rate		 {: RESULT = rate; :}
						  ; 
					
basic_rate_definition	::= variable_rate:name rate_assignment_token finite_rate:r SEMI
                          	 {: 
                          	 	RateDefinitionNode rateDef = ASTFactory.createRateDefinition();
                          	 	rateDef.setName(name);
                          	 	rateDef.setRate(r);
                          	 	model.rateDefinitions().add(rateDef);
                          	 	RESULT = rateDef;                         	 		
                          	 :}
                         ;
                         

process_definition     ::= HASH basic_process_definition:def {: RESULT = def; :}
						 | basic_process_definition:def 	 {: RESULT = def; :}
						 ;
							 
basic_process_definition ::= constant:name EQUALS process:resolved SEMI
                  			{: 	
                  				ProcessDefinitionNode procDef = 
                  					ASTFactory.createProcessDefinition();
                  				procDef.setName(name);
                  				procDef.setNode(resolved);
                  				model.processDefinitions().add(procDef);
                  				RESULT = procDef;
                  			 :}
                  		  ;

activity      			::= LPAREN activity_action_type:action COMMA rate:r RPAREN
		                  {: ActivityNode act = ASTFactory.createActivity();
		                  	  act.setAction(action);
		                  	  act.setRate(r);
		                  	  RESULT = act;
		                  :}
		              		;

rate					::= finite_rate:rate
							{: RESULT = rate; :}
						  
						  |
						    passive_rate:rate
						    {: RESULT = rate; :}
						  ;
						  
finite_rate          	::= finite_rate:r1 SUM finite_rate:r2
   		                   {: 
   		                   	  BinaryOperatorRateNode rate = 
   		                   	  	ASTFactory.createBinaryOperationRate();
   		                   	  rate.setLeft(r1);
   		                   	  rate.setRight(r2);
   		                   	  rate.setOperator(BinaryOperatorRateNode.Operator.PLUS);
   		                   	  RESULT = rate;
   		                   :}
			
			              | finite_rate:r1 MINUS finite_rate:r2
			                {:
			                 BinaryOperatorRateNode rate = 
   		                   	  	ASTFactory.createBinaryOperationRate();
   		                   	  rate.setLeft(r1);
   		                   	  rate.setRight(r2);
   		                   	  rate.setOperator(BinaryOperatorRateNode.Operator.MINUS);
   		                   	  RESULT = rate;
			                 
			                :}
			
			              | finite_rate:r1 MULT finite_rate:r2
			                {: 
			                 BinaryOperatorRateNode rate = 
   		                   	  	ASTFactory.createBinaryOperationRate();
   		                   	  rate.setLeft(r1);
   		                   	  rate.setRight(r2);
   		                   	  rate.setOperator(BinaryOperatorRateNode.Operator.MULT);
   		                   	  RESULT = rate;
			                 :}
				
			              | finite_rate:r1 DIVIDE finite_rate:r2
			                {:
			                 BinaryOperatorRateNode rate = 
   		                   	  	ASTFactory.createBinaryOperationRate();
   		                   	  rate.setLeft(r1);
   		                   	  rate.setRight(r2);
   		                   	  rate.setOperator(BinaryOperatorRateNode.Operator.DIV);
   		                   	  RESULT = rate; 
							 :}
			
			              | LPAREN finite_rate:r RPAREN
			                {: RESULT = r; :}
			                
			              | DOUBLE_NUMBER:double_number
			                {: RateDoubleNode rate = ASTFactory.createRate();
			                	rate.setValue(double_number);
			                	RESULT = rate;
			                :}
			              | PASSIVE_MULTIPLIER:double_number
			              	{: RateDoubleNode rate = ASTFactory.createRate();
			              		rate.setValue(double_number);
			              		RESULT = rate;
			              	:}
			                
			              | variable_rate:rate
			              	{: RESULT = rate; :}
			              
			              ;
			              
variable_rate			::= ACTIVITY_STRN:name
			                {: VariableRateNode rate = ASTFactory.createRateVariable();
			                	rate.setName(name);
			                	RESULT = rate; 
			                :}
			         	  ;
			         	  
passive_rate			::= PASSIVE_MULTIPLIER:value MULT TOP
							{:  PassiveRateNode rate = ASTFactory.createPassiveRate();
								rate.setMultiplicity(value);
								RESULT = rate;
							:}						 
						 |  TOP
						    {: PassiveRateNode rate = ASTFactory.createPassiveRate();
								rate.setMultiplicity(1);
								RESULT = rate; 
							:}
			             ;
                     
process          		::= activity:a DOT process:p
			                {: PrefixNode prefix = ASTFactory.createPrefix();
			                	prefix.setActivity(a);
			                	prefix.setTarget(p);
			                	RESULT = prefix;
			                :}
			              
			              | process:p1 SUM process:p2
			                {: ChoiceNode choice =ASTFactory.createChoice();
			                	choice.setLeft(p1);
			                	choice.setRight(p2);
			                	RESULT = choice;
			                :}
			                
			              | cooperation:coop 
			                {: RESULT = coop; :}
			                
			              | process:p DIVIDE action_set:l
			                {: HidingNode hiding = ASTFactory.createHiding();
			                	hiding.setProcess(p);
			                	hiding.setActionSet(l);
			                	RESULT = hiding;
			                :}
			              
			              | LPAREN process:p RPAREN
			                {: RESULT = p; :}
			              
			              | constant:c
			              	{: RESULT = c; :} 
			              
			              | aggregation:a
			                {: RESULT = a; :}
			              	
			              ;

aggregation				::= constant:p LSQUARE PASSIVE_MULTIPLIER:copies RSQUARE 
							{:  AggregationNode aggr = ASTFactory.createAggregation();
								aggr.setCopies(copies);
								aggr.setProcessNode(p);
								RESULT = aggr; :}
						  ;
			              
constant				::= PROCESS_STRN:p
			              	 {: ConstantProcessNode constant = ASTFactory.createConstant();
			              	 	constant.setName(p);
			              	 	RESULT = constant; :}
			              ;		
cooperation				::= process:lhs action_set:set process:rhs
							{:  CooperationNode coop = ASTFactory.createCooperation();
								coop.setLeft(lhs);
								coop.setRight(rhs);
								coop.setActionSet(set);
								RESULT = coop;
							:}%prec LCOOP
						;
			
action_set 				::= LCOOP action_list RCOOP
							{: RESULT = actionManager.get(); :}
							
					     |  PAR
					    	{: RESULT = actionManager.get(); :}
					    ;
					    
action_list				::= action_list:list COMMA action_type:type
							{: actionManager.add(type);
							:}
						
						| 	action_type:type
						  	{: actionManager.resetActions();
						  	   actionManager.add(type);
						  	:}
						
						| {: actionManager.resetActions(); :}
						 
						;
						
action_type		        ::= ACTIVITY_STRN:a 
		                  {: 	ActionTypeNode action = ASTFactory.createActionType();
		                  		action.setType(a);
		                  		RESULT = action; 
		                  :}
		                ;
		                  
activity_action_type	::= action_type:namedAction
							{: RESULT = namedAction; :}
		                  | TAU
		                  {: UnknownActionTypeNode action = ASTFactory.createUnknownActionType();
		                  	 RESULT = action;
		                  :}
		              	   ;

							
