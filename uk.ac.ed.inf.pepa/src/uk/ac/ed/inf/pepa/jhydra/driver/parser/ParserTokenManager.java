package uk.ac.ed.inf.pepa.jhydra.driver.parser;

/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xb800000000000000L) != 0L || (active1 & 0x78777f00000057L) != 0L)
         {
            jjmatchedKind = 127;
            return 46;
         }
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 127;
            return 113;
         }
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 127;
            return 70;
         }
         if ((active2 & 0x400L) != 0L)
            return 22;
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 127;
            return 16;
         }
         if ((active2 & 0x100200000000L) != 0L)
            return 123;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0xe000000L) != 0L)
         {
            jjmatchedKind = 127;
            return 96;
         }
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 127;
            return 5;
         }
         if ((active1 & 0x7800000000020L) != 0L)
         {
            jjmatchedKind = 127;
            return 12;
         }
         if ((active1 & 0xf0000000L) != 0L)
         {
            jjmatchedKind = 127;
            return 92;
         }
         return -1;
      case 1:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x10600000000L) != 0L)
            return 46;
         if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0x7ffef9fe0000ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 1;
            }
            return 46;
         }
         if ((active2 & 0x100000000000L) != 0L)
            return 123;
         return -1;
      case 2:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x64000000084L) != 0L)
            return 46;
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x7ff8bdfe00007bL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 2;
            }
            return 46;
         }
         return -1;
      case 3:
         if ((active0 & 0xa000000000000000L) != 0L || (active1 & 0x2838883a00000aL) != 0L)
            return 46;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x57c435c4000071L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 3;
            return 46;
         }
         return -1;
      case 4:
         if ((active1 & 0x15440580000071L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 4;
            return 46;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x42803044000000L) != 0L)
            return 46;
         return -1;
      case 5:
         if ((active1 & 0x5400400000020L) != 0L)
            return 46;
         if ((active1 & 0x10040180000051L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 5;
            return 46;
         }
         return -1;
      case 6:
         if ((active1 & 0x100000001L) != 0L)
            return 46;
         if ((active1 & 0x10040080000050L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 6;
            return 46;
         }
         return -1;
      case 7:
         if ((active1 & 0x40000000040L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 7;
            return 46;
         }
         if ((active1 & 0x10000080000010L) != 0L)
            return 46;
         return -1;
      case 8:
         if ((active1 & 0x40000000000L) != 0L)
            return 46;
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 8;
            return 46;
         }
         return -1;
      case 9:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 9;
            return 46;
         }
         return -1;
      case 10:
         if ((active1 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 10;
            }
            return 46;
         }
         return -1;
      case 11:
         if ((active1 & 0x40L) != 0L)
            return 46;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000L);
      case 37:
         jjmatchedKind = 161;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000L);
      case 38:
         jjmatchedKind = 158;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000800000L);
      case 40:
         return jjStopAtPos(0, 130);
      case 41:
         return jjStopAtPos(0, 131);
      case 42:
         jjmatchedKind = 156;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000L);
      case 43:
         jjmatchedKind = 154;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2001000000L);
      case 44:
         return jjStopAtPos(0, 137);
      case 45:
         jjmatchedKind = 155;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1004002000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 138, 22);
      case 47:
         jjmatchedKind = 157;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000000L);
      case 58:
         return jjStopAtPos(0, 145);
      case 59:
         return jjStopAtPos(0, 136);
      case 60:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L, 0x200400080000L);
      case 61:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000L);
      case 62:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc01800100000L);
      case 63:
         return jjStopAtPos(0, 144);
      case 91:
         return jjStopAtPos(0, 134);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x7ffffffffffff80L, 0x0L, 0x0L);
      case 93:
         return jjStopAtPos(0, 135);
      case 94:
         jjmatchedKind = 160;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0xe000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000043L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x7000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70000000004L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x300000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1800000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7800000000020L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000010L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 132);
      case 124:
         jjmatchedKind = 159;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000400000L);
      case 125:
         return jjStopAtPos(0, 133);
      case 126:
         return jjStopAtPos(0, 143);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         break;
      case 43:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         break;
      case 45:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         break;
      case 60:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000000L);
      case 61:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 169);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 170);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 171);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 172, 123);
         break;
      case 62:
         if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 176);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc01000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200010000L, active1, 0x1010000010L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x8004008000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200030000000000L, active1, 0x500100000008L, active2, 0L);
      case 102:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 104, 46);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8001000L, active1, 0x40800020000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40004000L, active1, 0x42L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2800000084L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x500600080L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 59, 46);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10060000000000L, active2, 0L);
      case 111:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000100000000000L, active1, 0x2008c4c2000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x30c2010080000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000803020000L, active1, 0x8000004000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x386050a0800d00L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x5c4800000002200L, active1, 0x1000000000020L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x2200000000100L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0x4000000000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000001L, active2, 0L);
      case 124:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 173);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 174);
         break;
      case 62:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000000000L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c0000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000400e20000L, active1, 0x100002000000aL, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200010000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100292b141000L, active1, 0x4000000L, active2, 0L);
      case 102:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x64000000000000L, active2, 0L);
      case 108:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x201000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000040004000L, active1, 0x800c0000101L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x38088084008080L, active1, 0x802002000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 102, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x400840010082000L, active1, 0x10L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x10000810000040L, active2, 0L);
      case 116:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x605000000d00L, active1, 0x448008000000L, active2, 0L);
      case 117:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x8000400000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x200020000000000L, active1, 0x100000000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(3, 175);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400a05000003d00L, active1, 0x2104000001L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000220000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x80L, active1, 0x120L, active2, 0L);
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 46);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 46);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 46);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 46);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000440000000000L, active1, 0x2040000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 103:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 46);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 46);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100c4000L, active1, 0x10000000000010L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 46);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 46);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x888000000L, active1, 0x40000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x4108000L, active1, 0L, active2, 0L);
      case 111:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 46);
         break;
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x20003000200L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x5002000000000L, active1, 0x800000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c2080000000000L, active1, 0x1040000000L, active2, 0L);
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x110100030000L, active1, 0x5000080000040L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8008000000000L, active1, 0x400000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x400600000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400840000000L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000400000L, active1, 0x4000000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x9000L, active1, 0L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(4, 9);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(4, 17);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 46);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x900080L, active1, 0x120L);
      case 102:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x1002000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000040000L, active1, 0x10000000000000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10400010000L, active1, 0x1000080000000L);
      case 107:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 46);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x400000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400808000002000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000023080000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x100008000000L, active1, 0L);
      case 114:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 113, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x8021000000000L, active1, 0x440000000040L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000004200000L, active1, 0L);
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 46);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 46);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x1c0284000004d00L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x280000000L, active1, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x42000010000000L, active1, 0L);
      case 99:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x8080000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x104224000001d00L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000100L);
      case 104:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x840000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000L, active1, 0x41L);
      case 108:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0x10000080000010L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x81042100010000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x243180000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x400800000002000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x9484200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x230100000000000L, active1, 0L);
      case 118:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1020cb04000L, active1, 0x40000000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 99:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0x10L);
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000020000800L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000400000000L, active1, 0x10000000000000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4008000c0082000L, active1, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(6, 16);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(6, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(6, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         return jjMoveStringLiteralDfa7_0(active0, 0x71002010000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(6, 44);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000003008000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x80000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000100L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x860000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0xc000200000000L, active1, 0x40000000000L);
      case 100:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 116, 46);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(7, 49);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 46);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 95, 46);
         return jjMoveStringLiteralDfa8_0(active0, 0x60000d000000900L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x200002008000L, active1, 0L);
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(7, 14);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x1002000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x30080004000000L, active1, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x420001800000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(7, 54);
         return jjMoveStringLiteralDfa8_0(active0, 0x810000782000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x100e400000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000100L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x200080000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 106, 46);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0x100L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x860000502000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 31);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000042000400L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0xc010000008000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x820000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000800L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 26);
         return jjMoveStringLiteralDfa9_0(active0, 0x30400001000000L, active1, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(8, 19);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(8, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x400810000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(9, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x30080000000000L, active1, 0x40L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(9, 15);
         return jjMoveStringLiteralDfa10_0(active0, 0xd002000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x820000102000L, active1, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(9, 40);
         break;
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(9, 21);
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000400L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(9, 30);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(9, 45);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(9, 58);
         return jjMoveStringLiteralDfa10_0(active0, 0x41402000900L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0x21000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(10, 72);
         break;
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x1002000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(10, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x40400000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x30000800000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(10, 20);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(10, 41);
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x200001000000100L, active1, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x480000000400L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(11, 24);
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x31400800000000L, active1, 0L);
      case 104:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(11, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0xc080000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(11, 70, 46);
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x40400000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(11, 8);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(11, 36);
         return jjMoveStringLiteralDfa12_0(active0, 0xc002000400L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x800L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x220000000000000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(12, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(12, 39);
         break;
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(12, 42);
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0xc000800000000L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x400L);
      case 118:
         return jjMoveStringLiteralDfa13_0(active0, 0x400002000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 84:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(13, 52);
         break;
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x1400800000000L);
      case 104:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(13, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x22c000000000000L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(13, 43);
         break;
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(13, 34);
         break;
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000800L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000L);
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(14, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0xc000000000800L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 35);
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x21000000000000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000000400L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x200800000000000L);
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(15, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(15, 51);
         break;
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x400L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(15, 11);
         break;
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(15, 53);
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L);
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x200400000000000L);
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(16, 10);
         break;
      case 120:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(16, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(17, 57);
         break;
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(17, 46);
         break;
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(18, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 123;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 46:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 113:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 16:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 92:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 12:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 123:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 36)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(46);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 39)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjCheckNAdd(22);
                  else if (curChar == 37)
                     jjCheckNAddStates(0, 2);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAddStates(15, 17);
                  }
                  break;
               case 70:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 96:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 18:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(18, 20);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if (curChar == 39)
                     jjAddStates(13, 14);
                  break;
               case 28:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if (curChar == 39 && kind > 125)
                     kind = 125;
                  break;
               case 31:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 29);
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 34:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 36:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 37:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 39:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 40:
                  if (curChar == 34 && kind > 126)
                     kind = 126;
                  break;
               case 41:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 43:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 45:
                  if (curChar != 36)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar != 46)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(25, 27);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(25, 27);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(53, 26);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(57, 26);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 60:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 26);
                  break;
               case 62:
                  if (curChar != 48)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddStates(15, 17);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(64, 20);
                  break;
               case 65:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(65, 20);
                  break;
               case 104:
                  if (curChar == 50 && kind > 73)
                     kind = 73;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(46);
                  }
                  if (curChar == 117)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  break;
               case 113:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(46);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 121;
                  else if (curChar == 105)
                     jjCheckNAdd(7);
                  if (curChar == 105)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(46);
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 92:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(46);
                  }
                  if (curChar == 103)
                     jjCheckNAdd(67);
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(46);
                  }
                  if (curChar == 111)
                     jjCheckNAdd(7);
                  break;
               case 123:
               case 1:
                  jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(46);
                  }
                  if (curChar == 97)
                     jjAddStates(31, 33);
                  else if (curChar == 98)
                     jjAddStates(34, 36);
                  else if (curChar == 99)
                     jjAddStates(37, 38);
                  else if (curChar == 103)
                     jjAddStates(39, 41);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(46);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 88;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 96:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(46);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 102;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 6:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 114 && kind > 73)
                     kind = 73;
                  break;
               case 8:
                  if (curChar == 101)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 103 && kind > 73)
                     kind = 73;
                  break;
               case 15:
               case 95:
                  if (curChar == 99)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if ((0x100000001000L & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 26:
                  if ((0x5000000050L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 28:
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar == 92)
                     jjAddStates(44, 46);
                  break;
               case 31:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 37:
                  jjCheckNAddStates(10, 12);
                  break;
               case 38:
                  if (curChar == 92)
                     jjAddStates(47, 49);
                  break;
               case 39:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 63:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(64, 20);
                  break;
               case 66:
                  if (curChar == 103)
                     jjAddStates(39, 41);
                  break;
               case 67:
                  if (curChar == 115 && kind > 73)
                     kind = 73;
                  break;
               case 68:
                  if (curChar == 115)
                     jjCheckNAdd(67);
                  break;
               case 69:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if (curChar == 110 && kind > 73)
                     kind = 73;
                  break;
               case 72:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 108 && kind > 73)
                     kind = 73;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 99)
                     jjAddStates(37, 38);
                  break;
               case 91:
                  if (curChar == 110)
                     jjCheckNAdd(7);
                  break;
               case 93:
                  if (curChar == 103)
                     jjCheckNAdd(67);
                  break;
               case 94:
                  if (curChar == 98)
                     jjAddStates(34, 36);
                  break;
               case 97:
                  if (curChar == 98 && kind > 73)
                     kind = 73;
                  break;
               case 98:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 105:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 97)
                     jjAddStates(31, 33);
                  break;
               case 114:
                  if (curChar == 105)
                     jjCheckNAdd(7);
                  break;
               case 115:
                  if (curChar == 99 && kind > 73)
                     kind = 73;
                  break;
               case 116:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 46:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 113:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 16:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 92:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 12:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 123:
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 70:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 96:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(46);
                  break;
               case 28:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 37:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 123 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 48, 49, 54, 55, 58, 59, 26, 37, 38, 40, 28, 30, 63, 
   65, 20, 22, 23, 26, 37, 38, 42, 40, 50, 51, 26, 58, 59, 26, 113, 
   114, 122, 96, 103, 111, 92, 93, 70, 78, 89, 24, 25, 31, 32, 34, 39, 
   41, 43, 52, 53, 56, 57, 60, 61, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\134\155\157\144\145\154", 
"\134\163\164\141\164\145\166\145\143\164\157\162", "\134\164\171\160\145", 
"\134\163\164\141\164\145\143\157\156\163\164\162\165\143\164\157\162", "\134\163\164\141\164\145\144\145\163\164\162\165\143\164\157\162", 
"\134\150\145\141\144\145\162", "\134\164\162\141\156\163\151\164\151\157\156", 
"\134\151\156\151\164\151\141\154", "\134\143\157\156\144\151\164\151\157\156", "\134\141\143\164\151\157\156", 
"\134\162\141\164\145", "\134\167\145\151\147\150\164", "\134\160\162\151\157\162\151\164\171", 
"\134\147\145\156\145\162\141\164\151\157\156", "\134\155\141\170\163\164\141\164\145\163", 
"\134\155\141\170\143\160\165\164\151\155\145", "\134\163\141\146\145\150\141\163\150", 
"\134\162\145\160\157\162\164\163\164\171\154\145", "\134\162\145\160\157\162\164\151\156\164\145\162\166\141\154", 
"\134\143\157\156\163\164\141\156\164", "\134\150\145\154\160\166\141\154\165\145", 
"\134\160\162\151\155\141\162\171\150\141\163\150", "\134\163\145\143\157\156\144\141\162\171\150\141\163\150", 
"\134\151\156\166\141\162\151\141\156\164", "\134\163\157\154\165\164\151\157\156", "\134\155\145\164\150\157\144", 
"\134\141\143\143\165\162\141\143\171", "\134\155\141\170\151\164\145\162\141\164\151\157\156\163", 
"\134\162\145\154\141\170\160\141\162\141\155\145\164\145\162", "\134\163\164\141\162\164\166\145\143\164\157\162", 
"\134\160\145\162\146\157\162\155\141\156\143\145", "\134\163\164\141\164\145\155\145\141\163\165\162\145", 
"\134\143\157\165\156\164\155\145\141\163\165\162\145", "\134\145\163\164\151\155\141\164\157\162", 
"\134\145\170\160\162\145\163\163\151\157\156", "\134\160\162\145\143\157\156\144\151\164\151\157\156", 
"\134\160\157\163\164\143\157\156\144\151\164\151\157\156", "\134\157\165\164\160\165\164", "\134\163\164\141\164\145\154\151\163\164", 
"\134\163\164\145\141\144\171\163\164\141\164\145\166\145\143\164\157\162", "\134\164\162\141\156\163\151\164\151\157\156\155\141\164\162\151\170", 
"\134\160\145\162\146\157\162\155\141\156\143\145\162\145\163\165\154\164\163", "\134\160\141\163\163\141\147\145", 
"\134\164\141\162\147\145\164\143\157\156\144\151\164\151\157\156", "\134\163\157\165\162\143\145\143\157\156\144\151\164\151\157\156", 
"\134\163\157\152\157\165\162\156\164\151\155\145\114\124", "\134\163\157\152\157\165\162\156\164\151\155\145\144\151\163\164", 
"\134\164\137\163\164\141\162\164", "\134\164\137\163\164\157\160", "\134\164\137\163\164\145\160", 
"\134\145\170\143\154\165\144\145\144\143\157\156\144\151\164\151\157\156", "\134\164\162\141\156\163\151\145\156\164", "\157\156", "\157\146\146", 
"\146\165\154\154", "\142\162\151\145\146", "\156\157\156\145", "\144\171\156\141\155\151\143", 
"\144\151\141\147", "\151\154\165", "\155\145\141\156", "\166\141\162\151\141\156\143\145", 
"\163\164\144\144\145\166", "\144\151\163\164\162\151\142\165\164\151\157\156", "\141\154\154", 
"\74\165\156\144\145\146\151\156\145\144\76", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\142\157\157\154", "\142\162\145\141\153", "\142\171\164\145", 
"\143\141\163\145", "\143\150\141\162", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\146\141\154\163\145", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\156\164", "\151\156\164\145\162\146\141\143\145", 
"\154\157\156\147", "\156\145\170\164", "\156\165\154\154", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\165\160\145\162", 
"\163\167\151\164\143\150", "\164\162\165\145", "\165\156\163\151\147\156\145\144", "\166\157\151\144", 
"\167\150\151\154\145", null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\75", "\76", "\74", 
"\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", 
"\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", 
"\74\74", "\76\76", "\76\76\76", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", 
"\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xe8fffffffe0003ffL, 0x1fffffffffffcL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x40L, 0x0L, 0x0L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[123];
static private final int[] jjstateSet = new int[246];
static protected char curChar;
/** Constructor. */
public ParserTokenManager(JavaCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 123; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
