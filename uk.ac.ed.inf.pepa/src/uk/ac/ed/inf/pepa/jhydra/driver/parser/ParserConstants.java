package uk.ac.ed.inf.pepa.jhydra.driver.parser;

/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int T_MODEL = 7;
  /** RegularExpression Id. */
  int T_STATE_VECTOR = 8;
  /** RegularExpression Id. */
  int T_TYPE = 9;
  /** RegularExpression Id. */
  int T_CONSTRUCTOR = 10;
  /** RegularExpression Id. */
  int T_DESTRUCTOR = 11;
  /** RegularExpression Id. */
  int T_HEADER = 12;
  /** RegularExpression Id. */
  int T_TRANSITION = 13;
  /** RegularExpression Id. */
  int T_INITIAL = 14;
  /** RegularExpression Id. */
  int T_CONDITION = 15;
  /** RegularExpression Id. */
  int T_ACTION = 16;
  /** RegularExpression Id. */
  int T_RATE = 17;
  /** RegularExpression Id. */
  int T_WEIGHT = 18;
  /** RegularExpression Id. */
  int T_PRIORITY = 19;
  /** RegularExpression Id. */
  int T_GENERATION_CONTROL = 20;
  /** RegularExpression Id. */
  int T_MAX_STATES = 21;
  /** RegularExpression Id. */
  int T_MAX_CPU_TIME = 22;
  /** RegularExpression Id. */
  int T_SAFE_HASH = 23;
  /** RegularExpression Id. */
  int T_REPORT_STYLE = 24;
  /** RegularExpression Id. */
  int T_REPORT_INTERVAL = 25;
  /** RegularExpression Id. */
  int T_CONSTANT = 26;
  /** RegularExpression Id. */
  int T_HELP_VALUE = 27;
  /** RegularExpression Id. */
  int T_PRIMARY = 28;
  /** RegularExpression Id. */
  int T_SECONDARY = 29;
  /** RegularExpression Id. */
  int T_INVARIANT = 30;
  /** RegularExpression Id. */
  int T_SOLUTION_CONTROL = 31;
  /** RegularExpression Id. */
  int T_METHOD = 32;
  /** RegularExpression Id. */
  int T_ACCURACY = 33;
  /** RegularExpression Id. */
  int T_MAX_ITERATIONS = 34;
  /** RegularExpression Id. */
  int T_RELAX_PARAMETER = 35;
  /** RegularExpression Id. */
  int T_START_VECTOR = 36;
  /** RegularExpression Id. */
  int T_PERFORMANCE = 37;
  /** RegularExpression Id. */
  int T_STATE_MEASURE = 38;
  /** RegularExpression Id. */
  int T_COUNT_MEASURE = 39;
  /** RegularExpression Id. */
  int T_ESTIMATOR = 40;
  /** RegularExpression Id. */
  int T_EXPRESSION = 41;
  /** RegularExpression Id. */
  int T_PRECONDITION = 42;
  /** RegularExpression Id. */
  int T_POSTCONDITION = 43;
  /** RegularExpression Id. */
  int T_OUTPUT = 44;
  /** RegularExpression Id. */
  int T_STATELIST = 45;
  /** RegularExpression Id. */
  int T_STEADY_STATE_VECTOR = 46;
  /** RegularExpression Id. */
  int T_TRANSITION_MATRIX = 47;
  /** RegularExpression Id. */
  int T_PERFORMANCE_RESULTS = 48;
  /** RegularExpression Id. */
  int T_PASSAGE = 49;
  /** RegularExpression Id. */
  int T_TARGET_CONDITION = 50;
  /** RegularExpression Id. */
  int T_SOURCE_CONDITION = 51;
  /** RegularExpression Id. */
  int T_SOJOURNTIME_LT = 52;
  /** RegularExpression Id. */
  int T_SOJOURNTIME = 53;
  /** RegularExpression Id. */
  int T_START = 54;
  /** RegularExpression Id. */
  int T_STOP = 55;
  /** RegularExpression Id. */
  int T_STEP = 56;
  /** RegularExpression Id. */
  int T_EXCLUDE_CONDITION = 57;
  /** RegularExpression Id. */
  int T_TRANSIENT = 58;
  /** RegularExpression Id. */
  int T_ON = 59;
  /** RegularExpression Id. */
  int T_OFF = 60;
  /** RegularExpression Id. */
  int T_FULL = 61;
  /** RegularExpression Id. */
  int T_BRIEF = 62;
  /** RegularExpression Id. */
  int T_NONE = 63;
  /** RegularExpression Id. */
  int T_DYNAMIC = 64;
  /** RegularExpression Id. */
  int T_DIAG = 65;
  /** RegularExpression Id. */
  int T_ILU = 66;
  /** RegularExpression Id. */
  int T_MEAN = 67;
  /** RegularExpression Id. */
  int T_VARIANCE = 68;
  /** RegularExpression Id. */
  int T_STDDEV = 69;
  /** RegularExpression Id. */
  int T_DISTRIBUTION = 70;
  /** RegularExpression Id. */
  int T_ALL = 71;
  /** RegularExpression Id. */
  int T_UNDEFINED = 72;
  /** RegularExpression Id. */
  int METHOD_LITERAL = 73;
  /** RegularExpression Id. */
  int T_GAUSS = 74;
  /** RegularExpression Id. */
  int T_LU = 75;
  /** RegularExpression Id. */
  int T_GRASSMANN = 76;
  /** RegularExpression Id. */
  int T_POWER = 77;
  /** RegularExpression Id. */
  int T_GAUSS_SEIDEL = 78;
  /** RegularExpression Id. */
  int T_SOR = 79;
  /** RegularExpression Id. */
  int T_CGNR = 80;
  /** RegularExpression Id. */
  int T_CGS = 81;
  /** RegularExpression Id. */
  int T_BICG = 82;
  /** RegularExpression Id. */
  int T_BICGSTAB = 83;
  /** RegularExpression Id. */
  int T_BICGSTAB2 = 84;
  /** RegularExpression Id. */
  int T_MYCG = 85;
  /** RegularExpression Id. */
  int T_AI = 86;
  /** RegularExpression Id. */
  int T_AIR = 87;
  /** RegularExpression Id. */
  int T_AUTOMATIC = 88;
  /** RegularExpression Id. */
  int BOOLEAN = 89;
  /** RegularExpression Id. */
  int BREAK = 90;
  /** RegularExpression Id. */
  int BYTE = 91;
  /** RegularExpression Id. */
  int CASE = 92;
  /** RegularExpression Id. */
  int CHAR = 93;
  /** RegularExpression Id. */
  int CONST = 94;
  /** RegularExpression Id. */
  int CONTINUE = 95;
  /** RegularExpression Id. */
  int _DEFAULT = 96;
  /** RegularExpression Id. */
  int DO = 97;
  /** RegularExpression Id. */
  int DOUBLE = 98;
  /** RegularExpression Id. */
  int ELSE = 99;
  /** RegularExpression Id. */
  int FALSE = 100;
  /** RegularExpression Id. */
  int FLOAT = 101;
  /** RegularExpression Id. */
  int FOR = 102;
  /** RegularExpression Id. */
  int GOTO = 103;
  /** RegularExpression Id. */
  int IF = 104;
  /** RegularExpression Id. */
  int INT = 105;
  /** RegularExpression Id. */
  int INTERFACE = 106;
  /** RegularExpression Id. */
  int LONG = 107;
  /** RegularExpression Id. */
  int NEXT = 108;
  /** RegularExpression Id. */
  int NULL = 109;
  /** RegularExpression Id. */
  int RETURN = 110;
  /** RegularExpression Id. */
  int SHORT = 111;
  /** RegularExpression Id. */
  int STATIC = 112;
  /** RegularExpression Id. */
  int SUPER = 113;
  /** RegularExpression Id. */
  int SWITCH = 114;
  /** RegularExpression Id. */
  int TRUE = 115;
  /** RegularExpression Id. */
  int UNSIGNED = 116;
  /** RegularExpression Id. */
  int VOID = 117;
  /** RegularExpression Id. */
  int WHILE = 118;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 119;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 120;
  /** RegularExpression Id. */
  int HEX_LITERAL = 121;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 122;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 123;
  /** RegularExpression Id. */
  int EXPONENT = 124;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 125;
  /** RegularExpression Id. */
  int STRING_LITERAL = 126;
  /** RegularExpression Id. */
  int IDENTIFIER = 127;
  /** RegularExpression Id. */
  int LETTER = 128;
  /** RegularExpression Id. */
  int DIGIT = 129;
  /** RegularExpression Id. */
  int LPAREN = 130;
  /** RegularExpression Id. */
  int RPAREN = 131;
  /** RegularExpression Id. */
  int LBRACE = 132;
  /** RegularExpression Id. */
  int RBRACE = 133;
  /** RegularExpression Id. */
  int LBRACKET = 134;
  /** RegularExpression Id. */
  int RBRACKET = 135;
  /** RegularExpression Id. */
  int SEMICOLON = 136;
  /** RegularExpression Id. */
  int COMMA = 137;
  /** RegularExpression Id. */
  int DOT = 138;
  /** RegularExpression Id. */
  int ASSIGN = 139;
  /** RegularExpression Id. */
  int GT = 140;
  /** RegularExpression Id. */
  int LT = 141;
  /** RegularExpression Id. */
  int BANG = 142;
  /** RegularExpression Id. */
  int TILDE = 143;
  /** RegularExpression Id. */
  int HOOK = 144;
  /** RegularExpression Id. */
  int COLON = 145;
  /** RegularExpression Id. */
  int EQ = 146;
  /** RegularExpression Id. */
  int LE = 147;
  /** RegularExpression Id. */
  int GE = 148;
  /** RegularExpression Id. */
  int NE = 149;
  /** RegularExpression Id. */
  int SC_OR = 150;
  /** RegularExpression Id. */
  int SC_AND = 151;
  /** RegularExpression Id. */
  int INCR = 152;
  /** RegularExpression Id. */
  int DECR = 153;
  /** RegularExpression Id. */
  int PLUS = 154;
  /** RegularExpression Id. */
  int MINUS = 155;
  /** RegularExpression Id. */
  int STAR = 156;
  /** RegularExpression Id. */
  int SLASH = 157;
  /** RegularExpression Id. */
  int BIT_AND = 158;
  /** RegularExpression Id. */
  int BIT_OR = 159;
  /** RegularExpression Id. */
  int XOR = 160;
  /** RegularExpression Id. */
  int REM = 161;
  /** RegularExpression Id. */
  int LSHIFT = 162;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 163;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 164;
  /** RegularExpression Id. */
  int PLUSASSIGN = 165;
  /** RegularExpression Id. */
  int MINUSASSIGN = 166;
  /** RegularExpression Id. */
  int STARASSIGN = 167;
  /** RegularExpression Id. */
  int SLASHASSIGN = 168;
  /** RegularExpression Id. */
  int ANDASSIGN = 169;
  /** RegularExpression Id. */
  int ORASSIGN = 170;
  /** RegularExpression Id. */
  int XORASSIGN = 171;
  /** RegularExpression Id. */
  int REMASSIGN = 172;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 173;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 174;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 175;
  /** RegularExpression Id. */
  int DEREF = 176;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "\"\\\\model\"",
    "\"\\\\statevector\"",
    "\"\\\\type\"",
    "\"\\\\stateconstructor\"",
    "\"\\\\statedestructor\"",
    "\"\\\\header\"",
    "\"\\\\transition\"",
    "\"\\\\initial\"",
    "\"\\\\condition\"",
    "\"\\\\action\"",
    "\"\\\\rate\"",
    "\"\\\\weight\"",
    "\"\\\\priority\"",
    "\"\\\\generation\"",
    "\"\\\\maxstates\"",
    "\"\\\\maxcputime\"",
    "\"\\\\safehash\"",
    "\"\\\\reportstyle\"",
    "\"\\\\reportinterval\"",
    "\"\\\\constant\"",
    "\"\\\\helpvalue\"",
    "\"\\\\primaryhash\"",
    "\"\\\\secondaryhash\"",
    "\"\\\\invariant\"",
    "\"\\\\solution\"",
    "\"\\\\method\"",
    "\"\\\\accuracy\"",
    "\"\\\\maxiterations\"",
    "\"\\\\relaxparameter\"",
    "\"\\\\startvector\"",
    "\"\\\\performance\"",
    "\"\\\\statemeasure\"",
    "\"\\\\countmeasure\"",
    "\"\\\\estimator\"",
    "\"\\\\expression\"",
    "\"\\\\precondition\"",
    "\"\\\\postcondition\"",
    "\"\\\\output\"",
    "\"\\\\statelist\"",
    "\"\\\\steadystatevector\"",
    "\"\\\\transitionmatrix\"",
    "\"\\\\performanceresults\"",
    "\"\\\\passage\"",
    "\"\\\\targetcondition\"",
    "\"\\\\sourcecondition\"",
    "\"\\\\sojourntimeLT\"",
    "\"\\\\sojourntimedist\"",
    "\"\\\\t_start\"",
    "\"\\\\t_stop\"",
    "\"\\\\t_step\"",
    "\"\\\\excludedcondition\"",
    "\"\\\\transient\"",
    "\"on\"",
    "\"off\"",
    "\"full\"",
    "\"brief\"",
    "\"none\"",
    "\"dynamic\"",
    "\"diag\"",
    "\"ilu\"",
    "\"mean\"",
    "\"variance\"",
    "\"stddev\"",
    "\"distribution\"",
    "\"all\"",
    "\"<undefined>\"",
    "<METHOD_LITERAL>",
    "\"gauss\"",
    "\"lu\"",
    "\"grassmann\"",
    "\"power\"",
    "\"gauss_seidel\"",
    "\"sor\"",
    "\"cgnr\"",
    "\"cgs\"",
    "\"bicg\"",
    "\"bicgstab\"",
    "\"bicgstab2\"",
    "\"mycg\"",
    "\"ai\"",
    "\"air\"",
    "\"automatic\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"char\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"false\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"next\"",
    "\"null\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"true\"",
    "\"unsigned\"",
    "\"void\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"->\"",
  };

}
