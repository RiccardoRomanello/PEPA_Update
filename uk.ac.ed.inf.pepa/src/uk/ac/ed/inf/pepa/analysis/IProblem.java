/*******************************************************************************
 * Copyright (c) 2006, 2009 University of Edinburgh.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the BSD Licence, which
 * accompanies this feature and can be downloaded from
 * http://groups.inf.ed.ac.uk/pepa/update/licence.txt
 *******************************************************************************/
package uk.ac.ed.inf.pepa.analysis;

/**
 * This interface represents a problem generated by either the parser or during
 * static analysis.
 * <p>
 * Shamelessly inspired by the Eclipse JDT Plugin.
 * 
 * @author mtribast
 * 
 */
// TODO Do we need to insert char positions for code manipulation?
public interface IProblem {
	/**
	 * Returns this value when the position is unknown
	 */
	public final int POSITION_UNKNOWN = -1;
	
	/* Major distinction */
	public final int Error = 0x100000;

	public final int Warning = 0x200000;

	
	/* Main groups */
	public final int RateRelated = 0x010000;
	
	public final int ProcessRelated = 0x020000;

	public final int ActionRelated = 0x030000;

	public final int Syntax = 0x040000;
	
	/* Error types */
	public final int UndefinedRate = Error + RateRelated + 1;

	public final int DuplicatedRate = Error + RateRelated + 2;

	public final int UndefinedConstant = Error + ProcessRelated + 3;

	public final int UnusedRate = Warning + RateRelated + 4;

	public final int UnusedConstant = Warning + ProcessRelated + 5;

	public final int TransientState = Warning + ProcessRelated + 6;

	public final int SyntaxError = Error + Syntax + 7;
	
	public final int UnreachableDefinition = Warning + ProcessRelated + 8;

	public final int PotentialDeadLock = Warning + ActionRelated + 9;
	
	public final int RedundantAction = Warning + ActionRelated + 10;
	
	public final int UnguardedProcess = Error + ProcessRelated + 11;
	
	public final int DuplicatedProcess = Error + ProcessRelated + 12;
	
	public final int CooperationLoop = Error + ProcessRelated + 13;
	
	public final int UndefinedError = Error + 14;
	

	/**
	 * Returns the severity level of this problem
	 * 
	 * @return the severity level of this problem
	 */
	public int getId();

	/**
	 * The position of the first character where the problem is raised
	 * 
	 * @return the first character of the problem
	 */
	public int getChar();

	/**
	 * The length of the source code problem where the problem was raised
	 * 
	 * @return the length of the source code affected by the problem
	 */
	public int getLength();

	/**
	 * Answer the column number in source where the problem starts, or -1 if
	 * unknown.
	 * 
	 * @return the column number in source where the problem start), or -1 if
	 *         unknown
	 */
	public int getStartLine();

	/**
	 * Answer the column number in source where the problem begins, or -1 if
	 * unknown.
	 * 
	 * @return the column number in source where the problem begins), or -1 if
	 *         unknown
	 */
	public int getStartColumn();

	/**
	 * Answer the line number in source where the problem ends, or -1 if
	 * unknown.
	 * 
	 * @return the line number in source where the problem ends), or -1 if
	 *         unknown
	 */
	public int getEndLine();

	/**
	 * Answer the column number in source where the problem ends, or -1 if
	 * unknown.
	 * 
	 * @return the column number in source where the problem ends), or -1 if
	 *         unknown
	 */
	public int getEndColumn();

	/**
	 * Human readable message describing the encountered problem
	 * 
	 * @return message describing the encountered problem
	 */
	public String getMessage();

	/**
	 * Return true if the problem is a severe error
	 * 
	 * @return true for a severe error
	 */
	public boolean isError();

	/**
	 * Return true if the problem is a warning
	 * 
	 * @return true for a warning
	 */
	public boolean isWarning();

}
