
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 05 17:26:56 CEST 2024
//----------------------------------------------------

package uk.ac.ed.inf.pepa.parsing.internal;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.*;
import uk.ac.ed.inf.pepa.parsing.*;
import org.apache.log4j.Logger;
import uk.ac.ed.inf.pepa.analysis.*;
import uk.ac.ed.inf.pepa.analysis.internal.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 05 17:26:56 CEST 2024
  */
public class PepaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PepaParser() {super();}

  /** Constructor which sets the default scanner. */
  public PepaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PepaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\006\000\002\021" +
    "\006\000\002\021\006\000\002\021\002\000\002\022\006" +
    "\000\002\022\006\000\002\022\002\000\002\025\004\000" +
    "\002\025\002\000\002\031\004\000\002\031\002\000\002" +
    "\020\003\000\002\020\003\000\002\024\004\000\002\024" +
    "\003\000\002\023\006\000\002\023\004\000\002\030\004" +
    "\000\002\030\003\000\002\027\006\000\002\016\007\000" +
    "\002\011\003\000\002\011\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\010\003\000\002\012\005\000\002\012\003\000" +
    "\002\003\005\000\002\003\005\000\002\003\003\000\002" +
    "\003\003\000\002\003\005\000\002\003\005\000\002\003" +
    "\003\000\002\003\003\000\002\007\006\000\002\004\003" +
    "\000\002\004\003\000\002\006\007\000\002\005\005\000" +
    "\002\017\005\000\002\017\003\000\002\026\005\000\002" +
    "\026\003\000\002\026\002\000\002\015\003\000\002\015" +
    "\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\022\003\ufff8\007\ufff8\024\ufff8\025\ufff8\035" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000\022\003\010" +
    "\007\ufffa\024\ufffa\025\016\035\013\037\014\040\ufffa\041" +
    "\ufffa\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\022\003\ufff2\007\ufff2\024\ufff2\025\ufff2\035" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\001\002\000\004\011\151" +
    "\001\002\000\006\012\144\014\146\001\002\000\022\003" +
    "\ufff9\007\ufff9\024\ufff9\025\ufff9\035\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\001\002\000\006\033\130\034\131\001\002\000" +
    "\024\010\uffe1\011\uffe1\012\uffe1\014\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\031\uffe1\001\002\000\012\007\ufff6\024" +
    "\ufff6\040\ufff6\041\ufff6\001\002\000\006\003\010\037\014" +
    "\001\002\000\022\003\ufff3\007\ufff3\024\ufff3\025\ufff3\035" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\001\002\000\012\007\034" +
    "\024\025\040\026\041\030\001\002\000\020\002\uffdb\010" +
    "\uffdb\011\uffdb\013\uffdb\016\uffdb\022\uffdb\023\uffdb\001\002" +
    "\000\014\002\000\013\101\016\102\022\077\023\103\001" +
    "\002\000\020\002\uffd7\010\uffd7\011\uffd7\013\uffd7\016\uffd7" +
    "\022\uffd7\023\uffd7\001\002\000\004\005\126\001\002\000" +
    "\006\040\026\041\030\001\002\000\024\002\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\016\uffd5\022\uffd5\023\uffd5\030" +
    "\uffd5\001\002\000\012\007\ufff7\024\ufff7\040\ufff7\041\ufff7" +
    "\001\002\000\024\002\uffd4\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\016\uffd4\022\uffd4\023\uffd4\030\uffd4\001\002\000\020" +
    "\002\uffdc\010\uffdc\011\uffdc\013\uffdc\016\uffdc\022\uffdc\023" +
    "\uffdc\001\002\000\012\007\uffee\024\uffee\040\uffee\041\uffee" +
    "\001\002\000\020\002\uffd8\012\121\013\uffd8\016\uffd8\022" +
    "\uffd8\023\uffd8\030\044\001\002\000\014\007\034\032\042" +
    "\037\037\040\026\041\040\001\002\000\014\010\100\013" +
    "\101\016\102\022\077\023\103\001\002\000\004\004\065" +
    "\001\002\000\010\004\uffcc\011\uffcc\017\uffcc\001\002\000" +
    "\020\004\uffcb\010\uffd4\013\uffd4\016\uffd4\022\uffd4\023\uffd4" +
    "\030\uffd4\001\002\000\022\002\uffd8\010\uffd8\011\uffd8\013" +
    "\uffd8\016\uffd8\022\uffd8\023\uffd8\030\044\001\002\000\004" +
    "\004\uffc9\001\002\000\004\004\uffca\001\002\000\012\007" +
    "\051\036\050\037\014\042\047\001\002\000\014\020\056" +
    "\021\054\022\055\023\057\031\064\001\002\000\020\010" +
    "\uffe2\011\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\031\uffe2" +
    "\001\002\000\020\010\uffe4\011\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\031\uffe4\001\002\000\020\010\uffe3\011\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\031\uffe3\001\002\000" +
    "\012\007\051\036\050\037\014\042\047\001\002\000\014" +
    "\010\053\020\056\021\054\022\055\023\057\001\002\000" +
    "\020\010\uffe5\011\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\031\uffe5\001\002\000\012\007\051\036\050\037\014\042" +
    "\047\001\002\000\012\007\051\036\050\037\014\042\047" +
    "\001\002\000\012\007\051\036\050\037\014\042\047\001" +
    "\002\000\012\007\051\036\050\037\014\042\047\001\002" +
    "\000\020\010\uffe6\011\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\031\uffe6\001\002\000\020\010\uffe8\011\uffe8\020\uffe8" +
    "\021\054\022\uffe8\023\057\031\uffe8\001\002\000\020\010" +
    "\uffe9\011\uffe9\020\uffe9\021\054\022\uffe9\023\057\031\uffe9" +
    "\001\002\000\020\010\uffe7\011\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\031\uffe7\001\002\000\020\002\uffd6\010\uffd6" +
    "\011\uffd6\013\uffd6\016\uffd6\022\uffd6\023\uffd6\001\002\000" +
    "\014\006\070\007\051\036\066\037\014\042\047\001\002" +
    "\000\014\010\uffe3\020\uffe3\021\074\022\uffe3\023\uffe3\001" +
    "\002\000\004\010\uffea\001\002\000\004\010\uffdf\001\002" +
    "\000\014\010\uffeb\020\056\021\054\022\055\023\057\001" +
    "\002\000\004\010\073\001\002\000\004\005\uffec\001\002" +
    "\000\004\006\075\001\002\000\004\010\uffe0\001\002\000" +
    "\010\007\034\040\026\041\030\001\002\000\010\007\034" +
    "\040\026\041\030\001\002\000\020\002\uffd9\010\uffd9\011" +
    "\uffd9\013\uffd9\016\uffd9\022\uffd9\023\uffd9\001\002\000\026" +
    "\002\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\016\uffd0\022" +
    "\uffd0\023\uffd0\040\uffd0\041\uffd0\001\002\000\014\004\uffcd" +
    "\017\uffcd\021\114\037\037\041\107\001\002\000\006\013" +
    "\101\016\105\001\002\000\020\002\uffda\010\uffda\011\uffda" +
    "\013\uffda\016\uffda\022\uffda\023\uffda\001\002\000\012\004" +
    "\uffcd\017\uffcd\037\037\041\107\001\002\000\006\004\111" +
    "\017\112\001\002\000\010\004\uffcb\011\uffcb\017\uffcb\001" +
    "\002\000\010\004\uffce\011\uffce\017\uffce\001\002\000\006" +
    "\037\037\041\107\001\002\000\026\002\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\013\uffd1\016\uffd1\022\uffd1\023\uffd1\040\uffd1" +
    "\041\uffd1\001\002\000\010\004\uffcf\011\uffcf\017\uffcf\001" +
    "\002\000\004\017\115\001\002\000\010\007\034\040\026" +
    "\041\030\001\002\000\020\002\uffd3\010\uffd3\011\uffd3\013" +
    "\101\016\102\022\077\023\103\001\002\000\020\002\uffdd" +
    "\010\uffdd\011\uffdd\013\101\016\102\022\uffdd\023\103\001" +
    "\002\000\020\002\uffd2\010\uffd2\011\uffd2\013\uffd2\016\uffd2" +
    "\022\uffd2\023\103\001\002\000\010\007\034\040\026\041" +
    "\030\001\002\000\014\011\123\013\101\016\102\022\077" +
    "\023\103\001\002\000\012\007\uffed\024\uffed\040\uffed\041" +
    "\uffed\001\002\000\004\012\121\001\002\000\012\007\uffef" +
    "\024\uffef\040\uffef\041\uffef\001\002\000\010\007\034\040" +
    "\026\041\030\001\002\000\020\002\uffde\010\uffde\011\uffde" +
    "\013\uffde\016\uffde\022\uffde\023\103\001\002\000\004\011" +
    "\142\001\002\000\004\011\132\001\002\000\016\007\ufffd" +
    "\024\ufffd\033\ufffd\034\ufffd\040\ufffd\041\ufffd\001\002\000" +
    "\016\007\ufffc\024\ufffc\033\134\034\135\040\ufffc\041\ufffc" +
    "\001\002\000\012\004\uffcd\011\uffcd\037\037\041\107\001" +
    "\002\000\012\004\uffcd\011\uffcd\037\037\041\107\001\002" +
    "\000\006\004\111\011\137\001\002\000\016\007\uffff\024" +
    "\uffff\033\uffff\034\uffff\040\uffff\041\uffff\001\002\000\006" +
    "\004\111\011\141\001\002\000\016\007\ufffe\024\ufffe\033" +
    "\ufffe\034\ufffe\040\ufffe\041\ufffe\001\002\000\016\007\ufffd" +
    "\024\ufffd\033\ufffd\034\ufffd\040\ufffd\041\ufffd\001\002\000" +
    "\016\007\ufffb\024\ufffb\033\134\034\135\040\ufffb\041\ufffb" +
    "\001\002\000\012\007\ufff4\036\ufff4\037\ufff4\042\ufff4\001" +
    "\002\000\012\007\051\036\050\037\014\042\047\001\002" +
    "\000\012\007\ufff5\036\ufff5\037\ufff5\042\ufff5\001\002\000" +
    "\014\011\150\020\056\021\054\022\055\023\057\001\002" +
    "\000\022\003\ufff1\007\ufff1\024\ufff1\025\ufff1\035\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\001\002\000\022\003\ufff0\007\ufff0" +
    "\024\ufff0\025\ufff0\035\ufff0\037\ufff0\040\ufff0\041\ufff0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\006\002\004\025\003\001\001\000\012\010" +
    "\010\022\014\023\006\024\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\017\001\001\000\006\010" +
    "\010\023\016\001\001\000\002\001\001\000\022\003\021" +
    "\004\032\005\020\006\030\007\022\016\023\027\031\030" +
    "\026\001\001\000\002\001\001\000\004\017\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\123\027" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\034\004\040\005\020\006\030\007\022" +
    "\014\035\015\042\016\023\001\001\000\004\017\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\045\013\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\045\013\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\045\013\062\001\001\000\006\010\045\013" +
    "\061\001\001\000\006\010\045\013\060\001\001\000\006" +
    "\010\045\013\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\045\011\071\012\066\013\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\117\004\040\005\020" +
    "\006\030\007\022\016\023\001\001\000\016\003\116\004" +
    "\040\005\020\006\030\007\022\016\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\107\026\105\001" +
    "\001\000\004\017\103\001\001\000\002\001\001\000\006" +
    "\015\107\026\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\115\004\040\005\020\006\030\007\022\016\023\001\001" +
    "\000\004\017\075\001\001\000\004\017\075\001\001\000" +
    "\004\017\075\001\001\000\016\003\121\004\040\005\020" +
    "\006\030\007\022\016\023\001\001\000\004\017\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\126\004\040\005\020\006\030\007\022\016" +
    "\023\001\001\000\004\017\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\132\001\001\000\002\001" +
    "\001\000\006\015\107\026\137\001\001\000\006\015\107" +
    "\026\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\045\013" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PepaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PepaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PepaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
    static final Logger logger = Logger.getLogger("uk.ac.ed.inf.pepa.parsing.parser");
    
    private ParserException parserException = null; 
    
    private ArrayList<IProblem> parserProblems = new ArrayList<IProblem>();
	
    public void errorRecovered() {
    	IProblem syntaxError = ProblemFactory.createProblem(
			IProblem.SyntaxError, parserException.getLine(), 
			parserException.getColumn(),
			IProblem.POSITION_UNKNOWN, IProblem.POSITION_UNKNOWN, 
			parserException.getChar(), 
			parserException.getLength(), 
			parserException.getMessage());
		
		logger.debug("Error added");
		parserProblems.add(syntaxError);
			              	 	
    }
    
    public java_cup.runtime.Symbol parse() throws Exception {
    	Symbol result = null;
    	try {
    		result = super.parse();
    		ModelNode modelNode = action_obj.model;
    		modelNode.setProblems(parserProblems.toArray(
    			new IProblem[parserProblems.size()]));
    		if (result != null)
    			result.value = modelNode;
    	
    	} catch (Exception e) {
    		e.printStackTrace();
    		this.logger.debug("Exception occurred: " + e);
    	}
    	return result;
    	
    }    
    
    /* Return terminal symbols by sym. */	
	public String gettokenstr( int sym )
	{
	    String str;
	    switch( sym )
	    {	
	    	 case PepaToken.PASSIVE_MULTIPLIER: { str = " natural "; break; } 
	         case PepaToken.PROCESS_STRN:   { str=" identifier "; break; }
                 case PepaToken.ACTIVITY_STRN:  { str=" identifier "; break; }
                 case PepaToken.RPAREN:         { str=" ) "; break; }
             case PepaToken.TAU:				{ str=" TAU "; break; }
             case PepaToken.HIGH:				{ str=" HIGH "; break; }
             case PepaToken.LOW:				{ str=" LOW "; break; }
             case PepaToken.SET_DEFAULT_LEVEL:	{ str=" SET_DEFAULT_LEVEL "; break; }
	         case PepaToken.SEMI:           { str=" ; "; break; }
	         case PepaToken.SUM:            { str=" + "; break; }
	         case PepaToken.LPAREN:         { str=" ( "; break; }
	         case PepaToken.HASH:           { str=" # "; break; }
	         case PepaToken.DOUBLE_NUMBER:  { str=" double "; break; }
	         case PepaToken.RCOOP:          { str=" > "; break; }
	         case PepaToken.EQUALS:         { str=" = "; break; }
	         case PepaToken.COMMA:  { str=" , "; break; }
	         case PepaToken.PERC:   { str=" % "; break; }
	         case PepaToken.EOF:    { str=" EOF "; break; }
	         case PepaToken.MULT:   { str=" * "; break; }
	         case PepaToken.DIVIDE: { str=" / "; break; }
	         case PepaToken.PAR:    { str=" || "; break; }
	         case PepaToken.TOP:    { str=" T or infty "; break; }
	         case PepaToken.MINUS:  { str=" - "; break; }
	         case PepaToken.DOT:    { str=" . "; break; }
	         case PepaToken.LCOOP:  { str=" < "; break; }
	         case PepaToken.RSET:   { str=" } "; break; }
	         case PepaToken.COOP:   { str=" <> "; break;}
	         case PepaToken.LSET:   { str=" { "; break; }	
	         case PepaToken.LSQUARE:{ str=" [ "; break; }
	         case PepaToken.RSQUARE:{ str=" ] "; break; }
		 case PepaToken.QUOTED_STRN:{str=" Quoted string";break;}
             case PepaToken.RATE_EQUALS: 
                                    { str=" := "; break; }
             default: str="";
	   }
	   return str;      
	}
	
	public Symbol getCurrentToken() {
		return this.cur_token;
	}
	
	public java.util.Stack getStack() {
		return stack;
	}
	
	public void syntax_error(java_cup.runtime.Symbol current) {
	
		//unrecovered_syntax_error(current);
		String messageExpected = "Syntax Error. Current symbol: '"+
			(current.value==null? gettokenstr(current.sym) : current.value) +
		    "'. Expected: ";
		
		int state = ((Symbol)stack.peek()).parse_state;
		short[] row = action_tab[state];
		
		for( int i = 0; i<row.length; i++)
		{
		   if( row[i]>0)
		   {
           		messageExpected += gettokenstr( row[i] ); i++;
		   }
		}
		logger.debug("syntax_error called");
		logger.debug(messageExpected);
		if (current instanceof ComplexSymbol) {
			ComplexSymbol cs = (ComplexSymbol) current;
			logger.debug("Left location:" + cs.getLeft());
			logger.debug("Right location:" + cs.getRight());
		}
		
		PepaLexer pl = (PepaLexer)this.getScanner();
		parserException = new ParserException( 
			pl.getCurrentChar(),
		    (pl.getCurrentLineNumber()+1),
		     pl.getCurrentColumn(), 
                     pl.yylength(),
		    messageExpected);
	}
	
  public void report_error(String message, java_cup.runtime.Symbol info){
		logger.debug("report_error called");
  }

        /** Fetches column and line number from the lexer, and then throws 
         *  an excpetion containing the error message to signal
         *  that parsing has been unsuccesful. If the symbol
         *  contains a value, this is also reported.
         */
	public void unrecovered_syntax_error(java_cup.runtime.Symbol Current) {
		logger.debug("unrecovered_syntax_error called");
		errorRecovered();
		//done_parsing();
		
	}

  public void report_fatal_error(String message, Object info) {
		logger.debug("report_fatal_error called");
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PepaParser$actions {


	
	/* The top-level AST node for the parsed file */
	public ModelNode model = ASTFactory.createModel();
	
	/* Utility field for collecting temporary action sets */
	final ActionManager actionManager = new ActionManager();
	
	
	class ActionManager {
		
		private final Actions actions = new Actions();
		
		public ActionManager() {
			resetActions();
		}
		
		public void resetActions() {
			actions.clear();
		} 
		
		public void add(ActionTypeNode action) {
			actions.add(action);
		}
		
		public Actions get() {
			Actions copy = new Actions();
			copy.addAll(actions);
			resetActions();
			return copy;
		}
	}

  private final PepaParser parser;

  /** Constructor */
  CUP$PepaParser$actions(PepaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PepaParser$do_action(
    int                        CUP$PepaParser$act_num,
    java_cup.runtime.lr_parser CUP$PepaParser$parser,
    java.util.Stack            CUP$PepaParser$stack,
    int                        CUP$PepaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PepaParser$result;

      /* select the action based on the action number */
      switch (CUP$PepaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // activity_action_type ::= TAU 
            {
              ActionSuperNode RESULT =null;
		 UnknownActionTypeNode action = ASTFactory.createUnknownActionType();
		                  	 RESULT = action;
		                  
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("activity_action_type",10, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // activity_action_type ::= action_type 
            {
              ActionSuperNode RESULT =null;
		int namedActionleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int namedActionright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ActionTypeNode namedAction = (ActionTypeNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RESULT = namedAction; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("activity_action_type",10, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // action_type ::= QUOTED_STRN 
            {
              ActionTypeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 	ActionTypeNode action = ASTFactory.createActionType();
		                  		action.setType(a);
		                  		RESULT = action; 
		                  
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_type",11, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // action_type ::= ACTIVITY_STRN 
            {
              ActionTypeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 	ActionTypeNode action = ASTFactory.createActionType();
		                  		action.setType(a);
		                  		RESULT = action; 
		                  
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_type",11, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // action_list ::= 
            {
              RateDefinitionNode RESULT =null;
		 actionManager.resetActions(); 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_list",20, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // action_list ::= action_type 
            {
              RateDefinitionNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ActionTypeNode type = (ActionTypeNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 actionManager.resetActions();
						  	   actionManager.add(type);
						  	
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_list",20, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // action_list ::= action_list COMMA action_type 
            {
              RateDefinitionNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).right;
		RateDefinitionNode list = (RateDefinitionNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ActionTypeNode type = (ActionTypeNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 actionManager.add(type);
							
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_list",20, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // action_set ::= PAR 
            {
              Actions RESULT =null;
		 RESULT = actionManager.get(); 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_set",13, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // action_set ::= LCOOP action_list RCOOP 
            {
              Actions RESULT =null;
		 RESULT = actionManager.get(); 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_set",13, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cooperation ::= process action_set process 
            {
              CooperationNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).right;
		ProcessNode lhs = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).right;
		Actions set = (Actions)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ProcessNode rhs = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		  CooperationNode coop = ASTFactory.createCooperation();
								coop.setLeft(lhs);
								coop.setRight(rhs);
								coop.setActionSet(set);
								RESULT = coop; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("cooperation",3, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // wildcard_cooperation ::= process LCOOP MULT RCOOP process 
            {
              WildcardCooperationNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-4)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-4)).right;
		ProcessNode lhs = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-4)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ProcessNode rhs = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
			WildcardCooperationNode coop = ASTFactory.createWildcardCooperation();
								coop.setLeft(lhs);
								coop.setRight(rhs);
								RESULT = coop; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("wildcard_cooperation",4, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-4)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // constant ::= QUOTED_STRN 
            {
              ConstantProcessNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 ConstantProcessNode constant = ASTFactory.createConstant();
			              	 	constant.setName(p);
			              	 	RESULT = constant; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("constant",2, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // constant ::= PROCESS_STRN 
            {
              ConstantProcessNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 ConstantProcessNode constant = ASTFactory.createConstant();
			              		constant.setName(p);
								RESULT = constant; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("constant",2, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aggregation ::= constant LSQUARE finite_rate RSQUARE 
            {
              AggregationNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).right;
		ConstantProcessNode p = (ConstantProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).right;
		FiniteRateNode expression = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).value;
		  AggregationNode aggr = ASTFactory.createAggregation();
								aggr.setCopies(expression);
								aggr.setProcessNode(p);
								RESULT = aggr; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("aggregation",5, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // process ::= aggregation 
            {
              ProcessNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		AggregationNode a = (AggregationNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process",1, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // process ::= constant 
            {
              ProcessNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ConstantProcessNode c = (ConstantProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process",1, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // process ::= LPAREN process RPAREN 
            {
              ProcessNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).right;
		ProcessNode p = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).value;
		 RESULT = p; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process",1, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // process ::= process DIVIDE action_set 
            {
              ProcessNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).right;
		ProcessNode p = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		Actions l = (Actions)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 HidingNode hiding = ASTFactory.createHiding();
			                	hiding.setProcess(p);
			                	hiding.setActionSet(l);
			                	RESULT = hiding;
			                
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process",1, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // process ::= cooperation 
            {
              ProcessNode RESULT =null;
		int coopleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int coopright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		CooperationNode coop = (CooperationNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RESULT = coop; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process",1, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // process ::= wildcard_cooperation 
            {
              ProcessNode RESULT =null;
		int coopleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int coopright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		WildcardCooperationNode coop = (WildcardCooperationNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RESULT = coop; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process",1, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // process ::= process SUM process 
            {
              ProcessNode RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).right;
		ProcessNode p1 = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ProcessNode p2 = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 ChoiceNode choice =ASTFactory.createChoice();
			                	choice.setLeft(p1);
			                	choice.setRight(p2);
			                	RESULT = choice;
			                
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process",1, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // process ::= activity DOT process 
            {
              ProcessNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).right;
		ActivityNode a = (ActivityNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ProcessNode p = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 PrefixNode prefix = ASTFactory.createPrefix();
			                	prefix.setActivity(a);
			                	prefix.setTarget(p);
			                	RESULT = prefix;
			                
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process",1, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // passive_rate ::= TOP 
            {
              PassiveRateNode RESULT =null;
		 PassiveRateNode rate = ASTFactory.createPassiveRate();
								rate.setMultiplicity(1);
								RESULT = rate; 
							
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("passive_rate",8, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // passive_rate ::= PASSIVE_MULTIPLIER MULT TOP 
            {
              PassiveRateNode RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).value;
		  PassiveRateNode rate = ASTFactory.createPassiveRate();
								rate.setMultiplicity(value);
								RESULT = rate;
							
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("passive_rate",8, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable_rate ::= ACTIVITY_STRN 
            {
              VariableRateNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 VariableRateNode rate = ASTFactory.createRateVariable();
			                	rate.setName(name);
			                	RESULT = rate; 
			                
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("variable_rate",6, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // finite_rate ::= variable_rate 
            {
              FiniteRateNode RESULT =null;
		int rateleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int rateright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		VariableRateNode rate = (VariableRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RESULT = rate; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("finite_rate",9, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // finite_rate ::= PASSIVE_MULTIPLIER 
            {
              FiniteRateNode RESULT =null;
		int double_numberleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int double_numberright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		Integer double_number = (Integer)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RateDoubleNode rate = ASTFactory.createRate();
			              		rate.setValue(double_number);
			              		RESULT = rate;
			              	
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("finite_rate",9, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // finite_rate ::= DOUBLE_NUMBER 
            {
              FiniteRateNode RESULT =null;
		int double_numberleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int double_numberright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		Double double_number = (Double)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RateDoubleNode rate = ASTFactory.createRate();
			                	rate.setValue(double_number);
			                	RESULT = rate;
			                
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("finite_rate",9, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // finite_rate ::= LPAREN finite_rate RPAREN 
            {
              FiniteRateNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).right;
		FiniteRateNode r = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).value;
		 RESULT = r; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("finite_rate",9, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // finite_rate ::= finite_rate DIVIDE finite_rate 
            {
              FiniteRateNode RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).right;
		FiniteRateNode r1 = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		FiniteRateNode r2 = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		
			                 BinaryOperatorRateNode rate = 
   		                   	  	ASTFactory.createBinaryOperationRate();
   		                   	  rate.setLeft(r1);
   		                   	  rate.setRight(r2);
   		                   	  rate.setOperator(BinaryOperatorRateNode.Operator.DIV);
   		                   	  RESULT = rate; 
							 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("finite_rate",9, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // finite_rate ::= finite_rate MULT finite_rate 
            {
              FiniteRateNode RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).right;
		FiniteRateNode r1 = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		FiniteRateNode r2 = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 
			                 BinaryOperatorRateNode rate = 
   		                   	  	ASTFactory.createBinaryOperationRate();
   		                   	  rate.setLeft(r1);
   		                   	  rate.setRight(r2);
   		                   	  rate.setOperator(BinaryOperatorRateNode.Operator.MULT);
   		                   	  RESULT = rate;
			                 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("finite_rate",9, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // finite_rate ::= finite_rate MINUS finite_rate 
            {
              FiniteRateNode RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).right;
		FiniteRateNode r1 = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		FiniteRateNode r2 = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		
			                 BinaryOperatorRateNode rate = 
   		                   	  	ASTFactory.createBinaryOperationRate();
   		                   	  rate.setLeft(r1);
   		                   	  rate.setRight(r2);
   		                   	  rate.setOperator(BinaryOperatorRateNode.Operator.MINUS);
   		                   	  RESULT = rate;
			                 
			                
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("finite_rate",9, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // finite_rate ::= finite_rate SUM finite_rate 
            {
              FiniteRateNode RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).right;
		FiniteRateNode r1 = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		FiniteRateNode r2 = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 
   		                   	  BinaryOperatorRateNode rate = 
   		                   	  	ASTFactory.createBinaryOperationRate();
   		                   	  rate.setLeft(r1);
   		                   	  rate.setRight(r2);
   		                   	  rate.setOperator(BinaryOperatorRateNode.Operator.PLUS);
   		                   	  RESULT = rate;
   		                   
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("finite_rate",9, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-2)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rate ::= passive_rate 
            {
              RateNode RESULT =null;
		int rateleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int rateright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		PassiveRateNode rate = (PassiveRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RESULT = rate; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("rate",7, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rate ::= finite_rate 
            {
              RateNode RESULT =null;
		int rateleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int rateright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		FiniteRateNode rate = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RESULT = rate; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("rate",7, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // activity ::= LPAREN activity_action_type COMMA rate RPAREN 
            {
              ActivityNode RESULT =null;
		int actionleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).right;
		ActionSuperNode action = (ActionSuperNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).right;
		RateNode r = (RateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).value;
		 ActivityNode act = ASTFactory.createActivity();
		                  	  act.setAction(action);
		                  	  act.setRate(r);
		                  	  RESULT = act;
		                  
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("activity",12, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-4)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // basic_process_definition ::= constant EQUALS process SEMI 
            {
              ProcessDefinitionNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).right;
		ConstantProcessNode name = (ConstantProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).value;
		int resolvedleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).left;
		int resolvedright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).right;
		ProcessNode resolved = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).value;
		 	
                  				ProcessDefinitionNode procDef = 
                  					ASTFactory.createProcessDefinition();
                  				procDef.setName(name);
                  				procDef.setNode(resolved);
                  				model.processDefinitions().add(procDef);
                  				RESULT = procDef;
                  			 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("basic_process_definition",21, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // process_definition ::= basic_process_definition 
            {
              ProcessDefinitionNode RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ProcessDefinitionNode def = (ProcessDefinitionNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RESULT = def; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process_definition",22, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // process_definition ::= HASH basic_process_definition 
            {
              ProcessDefinitionNode RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ProcessDefinitionNode def = (ProcessDefinitionNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 RESULT = def; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process_definition",22, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // basic_rate_definition ::= error SEMI 
            {
              RateDefinitionNode RESULT =null;
		
                          	 	/* Get the current token (SEMI) */
                          	 	//Symbol currentToken = parser.getStack().peek();
                          	 	this.parser.errorRecovered();
                          	 	
                          	 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("basic_rate_definition",17, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // basic_rate_definition ::= variable_rate rate_assignment_token finite_rate SEMI 
            {
              RateDefinitionNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).right;
		VariableRateNode name = (VariableRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).right;
		FiniteRateNode r = (FiniteRateNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).value;
		 
                          	 	RateDefinitionNode rateDef = ASTFactory.createRateDefinition();
                          	 	rateDef.setName(name);
                          	 	rateDef.setRate(r);
                          	 	model.rateDefinitions().add(rateDef);
                          	 	RESULT = rateDef;                         	 		
                          	 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("basic_rate_definition",17, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // rate_definition ::= basic_rate_definition 
            {
              RateDefinitionNode RESULT =null;
		int rateleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int rateright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		RateDefinitionNode rate = (RateDefinitionNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		  //handleRateDefinitionError(rate);
						  		RESULT = rate; 
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("rate_definition",18, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rate_definition ::= PERC basic_rate_definition 
            {
              RateDefinitionNode RESULT =null;
		int rateleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int rateright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		RateDefinitionNode rate = (RateDefinitionNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 //handleRateDefinitionError(rate);
							   RESULT = rate; 
							
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("rate_definition",18, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rate_assignment_token ::= EQUALS 
            {
              Object RESULT =null;

              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("rate_assignment_token",14, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rate_assignment_token ::= RATE_EQUALS 
            {
              Object RESULT =null;

              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("rate_assignment_token",14, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // process_definition_list ::= 
            {
              ProcessDefinitionNode RESULT =null;

              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process_definition_list",23, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // process_definition_list ::= process_definition_list process_definition 
            {
              ProcessDefinitionNode RESULT =null;

              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("process_definition_list",23, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // rate_definition_list ::= 
            {
              RateDefinitionNode RESULT =null;

              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("rate_definition_list",19, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rate_definition_list ::= rate_definition_list rate_definition 
            {
              RateDefinitionNode RESULT =null;

              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("rate_definition_list",19, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // action_type_levels ::= 
            {
              Object RESULT =null;

              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_type_levels",16, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // action_type_levels ::= SET_DEFAULT_LEVEL HIGH SEMI action_type_level_def 
            {
              Object RESULT =null;
		
								model.levelDeclarations().default_level = LevelDeclarations.HIGH_LEVEL;
							
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_type_levels",16, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // action_type_levels ::= SET_DEFAULT_LEVEL LOW SEMI action_type_level_def 
            {
              Object RESULT =null;
		
								model.levelDeclarations().default_level = LevelDeclarations.LOW_LEVEL;
							
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_type_levels",16, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // action_type_level_def ::= 
            {
              Object RESULT =null;

              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_type_level_def",15, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // action_type_level_def ::= action_type_level_def HIGH action_list SEMI 
            {
              Object RESULT =null;
		
								model.levelDeclarations().getHigh().addAll(actionManager.get());
							
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_type_level_def",15, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // action_type_level_def ::= action_type_level_def LOW action_list SEMI 
            {
              Object RESULT =null;
		
								model.levelDeclarations().getLow().addAll(actionManager.get());
							
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("action_type_level_def",15, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // model ::= rate_definition_list action_type_levels process_definition_list process 
            {
              ModelNode RESULT =null;
		int equationleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).left;
		int equationright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()).right;
		ProcessNode equation = (ProcessNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.peek()).value;
		 	model.setSystemEquation(equation);
	                       		RESULT = model;
	                        
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("model",0, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-3)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          return CUP$PepaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= model EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).right;
		ModelNode start_val = (ModelNode)((java_cup.runtime.Symbol) CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)).value;
		RESULT = start_val;
              CUP$PepaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PepaParser$stack.elementAt(CUP$PepaParser$top-1)), ((java_cup.runtime.Symbol)CUP$PepaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PepaParser$parser.done_parsing();
          return CUP$PepaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

