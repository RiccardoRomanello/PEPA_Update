/* The following code was generated by JFlex 1.4.1 on 02/04/24, 15:50 */

/* 20070222 Brand new implementation of the PEPA scanner.
 *
 * Author: Mirco Tribastone -mtribast
 */

package uk.ac.ed.inf.pepa.parsing.internal;

import java.io.Reader;
import java.io.InputStreamReader;
import uk.ac.ed.inf.pepa.parsing.ILocationInfo;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 02/04/24, 15:50 from the specification file
 * <tt>src/jflex/PepaLocation.jflex</tt>
 */
public class PepaLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\56\1\3\1\2\1\0\1\3\1\1\16\56\4\0\1\3\1\0"+
    "\1\54\1\50\1\56\1\53\2\0\1\34\1\35\1\5\1\47\1\11"+
    "\1\46\1\10\1\4\1\6\11\7\1\40\1\36\1\42\1\37\1\43"+
    "\2\0\23\61\1\33\6\61\1\51\1\0\1\52\1\0\1\30\1\0"+
    "\1\13\2\57\1\31\1\27\1\17\1\22\1\21\1\15\2\57\1\23"+
    "\1\57\1\16\1\24\3\57\1\26\1\12\1\14\1\32\1\25\1\57"+
    "\1\20\1\57\1\44\1\41\1\45\1\0\41\56\2\0\4\56\4\0"+
    "\1\57\2\0\1\56\7\0\1\57\4\0\1\57\5\0\27\61\1\0"+
    "\7\61\30\57\1\0\10\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\2\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\2\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\2\61\1\57\1\61\1\57\1\61\3\57\2\61\1\57"+
    "\1\61\1\57\2\61\1\57\3\61\2\57\4\61\1\57\2\61\1\57"+
    "\3\61\3\57\2\61\1\57\2\61\1\57\1\61\1\57\1\61\1\57"+
    "\2\61\1\57\1\61\2\57\1\61\1\57\2\61\1\57\3\61\1\57"+
    "\1\61\1\57\2\61\2\57\1\56\1\61\3\57\4\56\1\61\1\56"+
    "\1\57\1\61\1\56\1\57\1\61\1\56\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\2\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\2\57\1\61\1\56\1\57\1\61\1\57\3\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\7\57\2\61\1\57\2\61\2\57"+
    "\1\61\1\57\4\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\105\57\1\56\44\57\7\56\2\57\4\0\14\56\16\0\5\57"+
    "\7\0\1\56\1\0\1\56\21\0\105\56\1\57\52\56\1\61\1\57"+
    "\1\61\1\57\1\56\1\0\1\61\1\57\2\0\4\57\1\0\1\61"+
    "\6\0\1\61\1\0\3\61\1\0\1\61\1\0\2\61\1\57\21\61"+
    "\1\0\11\61\43\57\1\61\2\57\3\61\3\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\5\57\1\61\1\57\1\0\1\61\1\57\2\61\2\57\63\61\60\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\0\5\56\2\0\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\2\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\2\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\0\46\61\2\0\1\56\6\0\51\57\6\0\1\56\1\0"+
    "\55\56\1\0\1\56\1\0\2\56\1\0\2\56\1\0\1\56\10\0"+
    "\33\56\4\0\4\56\15\0\6\56\5\0\1\56\4\0\13\56\1\0"+
    "\1\56\3\0\112\56\4\0\146\56\1\0\11\56\1\0\12\56\1\0"+
    "\23\56\2\0\1\56\17\0\74\56\2\0\145\56\16\0\66\56\4\0"+
    "\1\56\2\0\61\56\22\0\34\56\4\0\13\56\5\0\30\56\1\0"+
    "\6\56\1\0\2\56\6\0\314\56\2\0\12\56\1\0\23\56\1\0"+
    "\10\56\2\0\2\56\2\0\26\56\1\0\7\56\1\0\1\56\3\0"+
    "\4\56\2\0\11\56\2\0\2\56\2\0\4\56\10\0\1\56\4\0"+
    "\2\56\1\0\5\56\2\0\16\56\7\0\2\56\1\0\1\56\2\0"+
    "\3\56\1\0\6\56\4\0\2\56\2\0\26\56\1\0\7\56\1\0"+
    "\2\56\1\0\2\56\1\0\2\56\2\0\1\56\1\0\5\56\4\0"+
    "\2\56\2\0\3\56\3\0\1\56\7\0\4\56\1\0\1\56\7\0"+
    "\20\56\13\0\3\56\1\0\11\56\1\0\3\56\1\0\26\56\1\0"+
    "\7\56\1\0\2\56\1\0\5\56\2\0\12\56\1\0\3\56\1\0"+
    "\3\56\2\0\1\56\17\0\4\56\2\0\12\56\1\0\1\56\7\0"+
    "\7\56\1\0\3\56\1\0\10\56\2\0\2\56\2\0\26\56\1\0"+
    "\7\56\1\0\2\56\1\0\5\56\2\0\11\56\2\0\2\56\2\0"+
    "\3\56\7\0\3\56\4\0\2\56\1\0\5\56\2\0\12\56\1\0"+
    "\1\56\20\0\2\56\1\0\6\56\3\0\3\56\1\0\4\56\3\0"+
    "\2\56\1\0\1\56\1\0\2\56\3\0\2\56\3\0\3\56\3\0"+
    "\14\56\4\0\5\56\3\0\3\56\1\0\4\56\2\0\1\56\6\0"+
    "\1\56\16\0\12\56\11\0\1\56\6\0\15\56\1\0\3\56\1\0"+
    "\27\56\1\0\20\56\2\0\11\56\1\0\3\56\1\0\4\56\7\0"+
    "\2\56\1\0\3\56\2\0\1\56\2\0\4\56\2\0\12\56\20\0"+
    "\4\56\1\0\10\56\1\0\3\56\1\0\27\56\1\0\12\56\1\0"+
    "\5\56\2\0\11\56\1\0\3\56\1\0\4\56\7\0\2\56\6\0"+
    "\2\56\1\0\4\56\2\0\12\56\1\0\3\56\14\0\15\56\1\0"+
    "\3\56\1\0\63\56\1\0\3\56\1\0\5\56\5\0\4\56\7\0"+
    "\5\56\2\0\12\56\12\0\6\56\1\0\3\56\1\0\22\56\3\0"+
    "\30\56\1\0\11\56\1\0\1\56\2\0\7\56\3\0\1\56\4\0"+
    "\6\56\1\0\1\56\1\0\10\56\6\0\12\56\2\0\2\56\15\0"+
    "\72\56\4\0\20\56\1\0\12\56\47\0\2\56\1\0\1\56\1\0"+
    "\5\56\1\0\30\56\1\0\1\56\1\0\27\56\2\0\5\56\1\0"+
    "\1\56\1\0\7\56\1\0\12\56\2\0\4\56\40\0\1\56\27\0"+
    "\2\56\6\0\12\56\13\0\1\56\1\0\1\56\1\0\1\56\4\0"+
    "\12\56\1\0\44\56\4\0\24\56\1\0\22\56\1\0\44\56\11\0"+
    "\1\56\71\0\112\56\6\0\116\56\2\0\46\61\1\0\1\61\5\0"+
    "\1\61\2\0\53\57\1\0\4\57\u0149\56\1\0\4\56\2\0\7\56"+
    "\1\0\1\56\1\0\4\56\2\0\51\56\1\0\4\56\2\0\41\56"+
    "\1\0\4\56\2\0\7\56\1\0\1\56\1\0\4\56\2\0\17\56"+
    "\1\0\71\56\1\0\4\56\2\0\103\56\2\0\3\56\40\0\20\56"+
    "\20\0\126\61\2\0\6\57\3\0\u026c\56\2\0\21\56\1\0\32\56"+
    "\5\0\113\56\3\0\13\56\7\0\26\56\11\0\26\56\13\0\24\56"+
    "\14\0\15\56\1\0\3\56\1\0\2\56\14\0\124\56\3\0\1\56"+
    "\3\0\3\56\2\0\12\56\41\0\17\56\6\0\131\56\7\0\53\56"+
    "\5\0\106\56\12\0\37\56\1\0\14\56\4\0\14\56\12\0\50\56"+
    "\2\0\5\56\13\0\54\56\4\0\32\56\6\0\12\56\46\0\34\56"+
    "\4\0\77\56\1\0\35\56\2\0\13\56\6\0\12\56\15\0\1\56"+
    "\10\0\16\56\1\0\20\56\61\0\115\56\3\0\12\56\21\0\11\56"+
    "\14\0\164\56\14\0\70\56\10\0\12\56\3\0\61\56\2\0\11\57"+
    "\7\0\53\61\2\0\3\61\20\0\3\56\1\0\47\56\5\0\300\57"+
    "\100\56\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\11\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\11\57\10\61"+
    "\6\57\2\0\6\61\2\0\10\57\10\61\10\57\10\61\6\57\2\0"+
    "\6\61\2\0\10\57\1\0\1\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\10\57\10\61\16\57\2\0\10\57\10\56\10\57\10\56\10\57"+
    "\10\56\5\57\1\0\2\57\4\61\1\56\1\0\1\57\3\0\3\57"+
    "\1\0\2\57\4\61\1\56\3\0\4\57\2\0\2\57\4\61\4\0"+
    "\10\57\5\61\5\0\3\57\1\0\2\57\4\61\1\56\16\0\5\56"+
    "\32\0\5\56\20\0\2\56\23\0\1\56\13\0\5\56\1\0\12\56"+
    "\1\0\1\57\15\0\1\57\20\0\15\57\3\0\41\56\17\0\15\56"+
    "\4\0\1\56\3\0\14\56\21\0\1\61\4\0\1\61\2\0\1\57"+
    "\3\61\2\57\3\61\1\57\1\0\1\61\3\0\5\61\6\0\1\61"+
    "\1\0\1\61\1\0\1\61\1\0\4\61\1\0\1\57\4\61\1\57"+
    "\4\56\1\57\2\0\2\57\2\61\5\0\1\61\4\57\4\0\1\57"+
    "\21\0\20\61\20\57\3\56\1\61\1\57\4\56\u032d\0\32\60\32\55"+
    "\u0716\0\60\61\60\57\1\61\1\57\3\61\2\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\4\61\1\57\1\61\2\57\1\61\10\57\3\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\2\57\6\0"+
    "\1\61\1\57\1\61\1\57\3\56\1\61\1\57\14\0\46\57\1\0"+
    "\1\57\5\0\1\57\2\0\70\56\7\0\1\56\17\0\30\56\11\0"+
    "\7\56\1\0\7\56\1\0\7\56\1\0\7\56\1\0\7\56\1\0"+
    "\7\56\1\0\7\56\1\0\7\56\1\0\40\56\57\0\1\56\u01d5\0"+
    "\3\56\31\0\17\56\1\0\5\56\2\0\5\56\4\0\126\56\2\0"+
    "\2\56\2\0\3\56\1\0\132\56\1\0\4\56\5\0\53\56\1\0"+
    "\136\56\21\0\40\56\60\0\20\56\u0200\0\u19c0\56\100\0\u568d\56\103\0"+
    "\56\56\2\0\u010d\56\3\0\34\56\24\0\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\2\56\4\0\12\56\1\0\1\56\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\3\57\124\56\45\0\11\56\2\0\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\3\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61"+
    "\1\57\1\61\1\57\1\61\12\57\1\61\1\57\1\61\1\57\2\61"+
    "\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\56"+
    "\2\0\1\61\1\57\1\61\1\57\1\56\1\61\1\57\1\61\3\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\5\61\1\57\5\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57"+
    "\1\61\1\57\1\61\1\57\1\61\1\57\1\61\1\57\4\61\1\57"+
    "\1\61\1\57\5\0\1\61\1\57\1\0\1\57\1\0\1\57\1\61"+
    "\1\57\1\61\1\57\30\0\3\57\1\61\1\57\1\56\3\57\55\56"+
    "\4\0\1\56\13\0\1\56\7\0\64\56\14\0\106\56\12\0\12\56"+
    "\6\0\30\56\3\0\1\56\1\0\61\56\2\0\44\56\14\0\35\56"+
    "\3\0\101\56\16\0\13\56\6\0\37\56\1\0\67\56\11\0\16\56"+
    "\2\0\12\56\6\0\27\56\3\0\111\56\30\0\3\56\2\0\20\56"+
    "\2\0\5\56\12\0\6\56\2\0\6\56\2\0\6\56\11\0\7\56"+
    "\1\0\7\56\1\0\53\57\1\0\16\57\6\0\120\57\53\56\1\0"+
    "\2\56\2\0\12\56\6\0\u2ba4\56\14\0\27\56\4\0\61\56\u2104\0"+
    "\u016e\56\2\0\152\56\46\0\7\57\14\0\5\57\5\0\14\56\1\0"+
    "\15\56\1\0\5\56\1\0\1\56\1\0\2\56\1\0\2\56\1\0"+
    "\154\56\41\0\u016b\56\22\0\100\56\2\0\66\56\50\0\15\56\3\0"+
    "\20\56\20\0\20\56\3\0\2\56\30\0\3\56\31\0\1\56\6\0"+
    "\5\56\1\0\207\56\2\0\1\56\4\0\1\56\13\0\12\56\7\0"+
    "\32\61\4\0\1\56\1\0\32\57\13\0\131\56\3\0\6\56\2\0"+
    "\6\56\2\0\6\56\2\0\3\56\3\0\2\56\3\0\2\56\22\0"+
    "\3\56\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\6\11\1\12\1\13\1\14\1\15\1\16\2\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\1\1\31\2\0\1\5\5\11\1\32"+
    "\1\33\1\0\1\34\2\0\1\35\2\11\1\36\1\11"+
    "\1\0\1\2\1\11\1\37\1\11\1\12\14\11\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[73];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\62\0\226\0\62\0\310\0\372"+
    "\0\62\0\62\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226"+
    "\0\u0258\0\62\0\62\0\62\0\62\0\u028a\0\u02bc\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\62\0\u02ee\0\u0258\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\62\0\62\0\u02ee\0\62\0\u04b0"+
    "\0\u04e2\0\u015e\0\u0514\0\u0546\0\u015e\0\u0578\0\u05aa\0\u04b0"+
    "\0\u05dc\0\u015e\0\u060e\0\u015e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[73];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\14\1\15\3\14\1\16\1\14\1\17"+
    "\2\14\1\20\1\14\1\2\2\14\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\14"+
    "\1\2\1\14\2\43\64\0\1\4\63\0\1\44\1\45"+
    "\62\0\1\7\1\10\1\46\57\0\2\10\1\46\57\0"+
    "\2\14\2\0\1\14\1\47\20\14\22\0\2\14\1\0"+
    "\1\14\6\0\2\14\2\0\22\14\22\0\2\14\1\0"+
    "\1\14\6\0\2\14\2\0\4\14\1\50\15\14\22\0"+
    "\2\14\1\0\1\14\6\0\2\14\2\0\3\14\1\51"+
    "\16\14\22\0\2\14\1\0\1\14\6\0\2\14\2\0"+
    "\12\14\1\52\7\14\22\0\2\14\1\0\1\14\6\0"+
    "\2\14\2\0\15\14\1\53\4\14\22\0\2\14\1\0"+
    "\1\14\6\0\2\43\2\0\22\43\22\0\2\43\1\0"+
    "\1\43\37\0\1\54\63\0\1\55\20\0\54\56\1\57"+
    "\5\56\1\44\1\3\1\4\57\44\5\60\1\61\54\60"+
    "\6\0\2\46\60\0\2\14\2\0\2\14\1\62\17\14"+
    "\22\0\2\14\1\0\1\14\6\0\2\14\2\0\5\14"+
    "\1\63\14\14\22\0\2\14\1\0\1\14\6\0\2\14"+
    "\2\0\10\14\1\64\11\14\22\0\2\14\1\0\1\14"+
    "\6\0\2\14\2\0\13\14\1\65\6\14\22\0\2\14"+
    "\1\0\1\14\6\0\2\14\2\0\1\66\21\14\22\0"+
    "\2\14\1\0\1\14\5\60\1\67\60\60\1\70\1\67"+
    "\54\60\6\0\2\14\2\0\1\71\21\14\22\0\2\14"+
    "\1\0\1\14\6\0\2\14\2\0\7\14\1\72\12\14"+
    "\22\0\2\14\1\0\1\14\6\0\2\14\2\0\16\14"+
    "\1\73\3\14\22\0\2\14\1\0\1\14\4\60\1\4"+
    "\1\67\54\60\6\0\2\14\2\0\6\14\1\74\13\14"+
    "\22\0\2\14\1\0\1\14\6\0\2\14\2\0\17\14"+
    "\1\75\2\14\22\0\2\14\1\0\1\14\6\0\2\14"+
    "\2\0\15\14\1\76\4\14\22\0\2\14\1\0\1\14"+
    "\6\0\2\14\2\0\5\14\1\77\14\14\22\0\2\14"+
    "\1\0\1\14\6\0\2\14\2\0\1\14\1\100\20\14"+
    "\22\0\2\14\1\0\1\14\6\0\2\14\2\0\2\14"+
    "\1\101\17\14\22\0\2\14\1\0\1\14\6\0\2\14"+
    "\2\0\11\14\1\102\10\14\22\0\2\14\1\0\1\14"+
    "\6\0\2\14\2\0\1\103\21\14\22\0\2\14\1\0"+
    "\1\14\6\0\2\14\2\0\16\14\1\104\3\14\22\0"+
    "\2\14\1\0\1\14\6\0\2\14\2\0\11\14\1\105"+
    "\10\14\22\0\2\14\1\0\1\14\6\0\2\14\2\0"+
    "\15\14\1\106\4\14\22\0\2\14\1\0\1\14\6\0"+
    "\2\14\2\0\20\14\1\107\1\14\22\0\2\14\1\0"+
    "\1\14\6\0\2\14\2\0\15\14\1\110\4\14\22\0"+
    "\2\14\1\0\1\14\6\0\2\14\2\0\11\14\1\111"+
    "\10\14\22\0\2\14\1\0\1\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\2\1\2\11"+
    "\7\1\4\11\2\1\12\11\2\1\2\0\6\1\2\11"+
    "\1\0\1\11\2\0\5\1\1\0\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[73];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	  int getCurrentLineNumber(){
	    return yyline;
	  }
	
	  int getCurrentColumn(){
	    return yycolumn;
	  }
	  
	  int getCurrentChar() {
	  	return yychar;
	  }
	  
	  public PepaLexer(Reader reader, NewPepaSymbolFactory sf) {
	  	this(reader);
	  	symbolFactory = sf;
	  	
	  }
	  public PepaLexer(NewPepaSymbolFactory sf){
	        this(new InputStreamReader(System.in));
	        symbolFactory = sf;
	  }
  
	private NewPepaSymbolFactory symbolFactory;
    
    public Symbol symbol(String name, int code) {
        return symbolFactory.newSymbol(name, code,
        	createLeftLocation(), createRightLocation());
    }
    public Symbol symbol(String name, int code, Object lexem){
    
        return symbolFactory.newSymbol(name, code, 
        	createLeftLocation(), createRightLocation(), lexem);
    }
    
    private ILocationInfo createLeftLocation() {
    	return new LocationInfo(yyline+1, yycolumn+1, yychar);
    }
    private ILocationInfo createRightLocation() {
    	return new LocationInfo(yyline+1, yycolumn+1, yychar+yylength());
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PepaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PepaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4264) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return symbol("PASSIVE_MULTIPLIER", PepaToken.PASSIVE_MULTIPLIER, 
				Integer.valueOf(yytext()));
          }
        case 33: break;
        case 12: 
          { return symbol("RPARENT", PepaToken.RPAREN);
          }
        case 34: break;
        case 29: 
          { return symbol("TAU", PepaToken.TAU, yytext());
          }
        case 35: break;
        case 32: 
          { return symbol("SET_DEFAULT_LEVEL", PepaToken.SET_DEFAULT_LEVEL);
          }
        case 36: break;
        case 27: 
          { return symbol("PAR", PepaToken.PAR);
          }
        case 37: break;
        case 8: 
          { return symbol("COMMA", PepaToken.COMMA);
          }
        case 38: break;
        case 26: 
          { return symbol("RATE_EQUALS", PepaToken.RATE_EQUALS);
          }
        case 39: break;
        case 20: 
          { return symbol("SUM", PepaToken.SUM);
          }
        case 40: break;
        case 24: 
          { return symbol("PERC", PepaToken.PERC);
          }
        case 41: break;
        case 14: 
          { return symbol("EQUALS", PepaToken.EQUALS);
          }
        case 42: break;
        case 16: 
          { return symbol("RCOOP", PepaToken.RCOOP);
          }
        case 43: break;
        case 11: 
          { return symbol("LPAREN", PepaToken.LPAREN);
          }
        case 44: break;
        case 7: 
          { return symbol("DOT", PepaToken.DOT);
          }
        case 45: break;
        case 31: 
          { return symbol("HIGH", PepaToken.HIGH);
          }
        case 46: break;
        case 5: 
          { return symbol("DOUBLE_NUMBER", PepaToken.DOUBLE_NUMBER,Double.valueOf(yytext()));
          }
        case 47: break;
        case 1: 
          { return symbol("ERROR", PepaToken.error,"Illegal character: <" + yytext() + ">");
          }
        case 48: break;
        case 17: 
          { return symbol("LSET", PepaToken.LSET);
          }
        case 49: break;
        case 25: 
          { return symbol("PROCESS_STRN", PepaToken.PROCESS_STRN,yytext());
          }
        case 50: break;
        case 13: 
          { return symbol("SEMI", PepaToken.SEMI);
          }
        case 51: break;
        case 15: 
          { return symbol("LCOOP", PepaToken.LCOOP);
          }
        case 52: break;
        case 19: 
          { return symbol("MINUS", PepaToken.MINUS);
          }
        case 53: break;
        case 28: 
          { return symbol("QUOTED_STRN", PepaToken.QUOTED_STRN, yytext());
          }
        case 54: break;
        case 18: 
          { return symbol("RSET", PepaToken.RSET);
          }
        case 55: break;
        case 22: 
          { return symbol("LSQUARE", PepaToken.LSQUARE);
          }
        case 56: break;
        case 3: 
          { return symbol("DIVIDE", PepaToken.DIVIDE);
          }
        case 57: break;
        case 9: 
          { return symbol("ACTIVITY_STRN", PepaToken.ACTIVITY_STRN,yytext());
          }
        case 58: break;
        case 4: 
          { return symbol("MULT", PepaToken.MULT);
          }
        case 59: break;
        case 23: 
          { return symbol("RSQUARE", PepaToken.RSQUARE);
          }
        case 60: break;
        case 30: 
          { return symbol("LOW", PepaToken.LOW);
          }
        case 61: break;
        case 21: 
          { return symbol("HASH", PepaToken.HASH);
          }
        case 62: break;
        case 10: 
          { return symbol("TOP", PepaToken.TOP);
          }
        case 63: break;
        case 2: 
          { /* ignore */
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbolFactory.newSymbol("EOF",PepaToken.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
